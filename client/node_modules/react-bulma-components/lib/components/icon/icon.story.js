function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable react/prop-types */
import React from 'react';
import classnames from 'classnames';
import { Box, Icon } from '../..';
import CONSTANTS from '../../constants';
var faSizeMapper = {
  small: '',
  medium: 'lg',
  large: '2x'
};
export var Default = function Default(_ref) {
  var size = _ref.size,
      args = _objectWithoutProperties(_ref, ["size"]);

  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Icon, _extends({}, args, {
    size: size,
    style: {
      border: '1px solid red'
    }
  }), /*#__PURE__*/React.createElement("i", {
    className: classnames('fas fa-home', _defineProperty({}, "fa-".concat(faSizeMapper[size]), size))
  })));
};
Default.argTypes = {
  color: {
    control: {
      type: 'select',
      options: ['default'].concat(Object.values(CONSTANTS.COLORS))
    }
  },
  size: {
    control: {
      type: 'select',
      options: ['default', 'small', 'medium', 'large']
    }
  }
};
//# sourceMappingURL=icon.story.js.map