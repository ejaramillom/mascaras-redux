function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import { Block, Box, Button, Form, Icon } from '../../..';
import CONSTANTS from '../../../constants';
import Message from '../../message';
export var Default = function Default() {
  var _useState = useState('bulma'),
      _useState2 = _slicedToArray(_useState, 2),
      username = _useState2[0],
      setUsername = _useState2[1];

  var _useState3 = useState('hello@'),
      _useState4 = _slicedToArray(_useState3, 2),
      email = _useState4[0],
      setEmail = _useState4[1];

  var _useState5 = useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      subject = _useState6[0],
      setSubject = _useState6[1];

  var _useState7 = useState(''),
      _useState8 = _slicedToArray(_useState7, 2),
      message = _useState8[0],
      setMessage = _useState8[1];

  var _useState9 = useState(false),
      _useState10 = _slicedToArray(_useState9, 2),
      tocAgreed = _useState10[0],
      setTocAgreed = _useState10[1];

  var _useState11 = useState(''),
      _useState12 = _slicedToArray(_useState11, 2),
      questionValue = _useState12[0],
      setQuestionValue = _useState12[1];

  return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Username"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    color: "success",
    value: username,
    onChange: function onChange(e) {
      return setUsername(e.target.value);
    }
  }), /*#__PURE__*/React.createElement(Icon, {
    align: "left",
    size: "small"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-user"
  })), /*#__PURE__*/React.createElement(Icon, {
    align: "right",
    size: "small"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-check"
  }))), /*#__PURE__*/React.createElement(Form.Help, {
    color: "success"
  }, "This username is available")), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Email"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    color: "danger",
    value: email,
    onChange: function onChange(e) {
      return setEmail(e.target.value);
    }
  }), /*#__PURE__*/React.createElement(Icon, {
    align: "left",
    size: "small"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-envelope"
  })), /*#__PURE__*/React.createElement(Icon, {
    align: "right",
    size: "small"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-exclamation-triangle"
  }))), /*#__PURE__*/React.createElement(Form.Help, {
    color: "danger"
  }, "This email is invalid")), /*#__PURE__*/React.createElement(Block, {
    renderAs: "fieldset",
    disabled: true
  }, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Label Text"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    placeholder: "Inside a field set"
  }))), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Another disabled field"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    placeholder: "Another nside a field set"
  })))), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Subject"), /*#__PURE__*/React.createElement(Form.Field, {
    kind: "group"
  }, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Select, {
    value: subject,
    onChange: function onChange(e) {
      return setSubject(e.target.value);
    }
  }, /*#__PURE__*/React.createElement("option", {
    value: "select-dropdown"
  }, "Select dropdown"), /*#__PURE__*/React.createElement("option", {
    value: "with-options"
  }, "With options"))), /*#__PURE__*/React.createElement(Form.Control, {
    fullwidth: true,
    loading: true
  }, /*#__PURE__*/React.createElement(Form.Input, {
    placeholder: "With loading state"
  })))), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Message"), /*#__PURE__*/React.createElement(Form.Textarea, {
    value: message,
    onChange: function onChange(e) {
      return setMessage(e.target.value);
    }
  })), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Checkbox, {
    checked: tocAgreed,
    onChange: function onChange(e) {
      return setTocAgreed(e.target.checked);
    }
  }, '  ', "I agree to the ", /*#__PURE__*/React.createElement("a", {
    href: "#"
  }, "terms and conditions")))), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Radio, {
    value: "yes",
    name: "question",
    checked: questionValue === 'yes',
    onChange: function onChange(e) {
      return setQuestionValue(e.target.value);
    }
  }, '  ', "Yes"), /*#__PURE__*/React.createElement(Form.Radio, {
    value: "no",
    name: "question",
    checked: questionValue === 'no',
    onChange: function onChange(e) {
      return setQuestionValue(e.target.value);
    }
  }, '  ', "No"))), /*#__PURE__*/React.createElement(Form.Field, {
    kind: "group"
  }, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Button, {
    color: "link"
  }, "Submit")), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Button, {
    color: "link",
    colorVariant: "light"
  }, "Cancel"))));
};
export var LabelExample = function LabelExample(args) {
  return /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, args, "I'm the label of this field"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    placeholder: "Inside a field set"
  })));
};
LabelExample.argTypes = {
  size: {
    control: {
      type: 'select',
      options: ['small', 'medium', 'large']
    }
  }
};
export var Field = function Field(args) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Message, {
    color: "info"
  }, /*#__PURE__*/React.createElement(Message.Body, null, "Vertical Form")), /*#__PURE__*/React.createElement(Form.Field, args, /*#__PURE__*/React.createElement(Form.Label, null, "Field label"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    type: "text",
    placeholder: "Field control - text input"
  })), /*#__PURE__*/React.createElement(Form.Help, null, "Help text for this field")), /*#__PURE__*/React.createElement(Form.Field, args, /*#__PURE__*/React.createElement(Form.Label, null, "With Button"), /*#__PURE__*/React.createElement(Form.Field, {
    kind: "addons"
  }, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Button, {
    disabled: true
  }, "+1")), /*#__PURE__*/React.createElement(Form.Control, {
    fullwidth: true
  }, /*#__PURE__*/React.createElement(Form.Input, {
    type: "tel",
    placeholder: "555-555-555"
  }))), /*#__PURE__*/React.createElement(Form.Field, {
    kind: "group",
    align: "center"
  }, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Button, {
    color: "primary"
  }, "Send")), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Button, {
    color: "info"
  }, "Cancel")), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Button, {
    color: "link"
  }, "Reset"))))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Message, {
    color: "info"
  }, /*#__PURE__*/React.createElement(Message.Body, null, "Horizontal Form")), /*#__PURE__*/React.createElement(Form.Field, {
    horizontal: true
  }, /*#__PURE__*/React.createElement(Form.Field.Label, null, /*#__PURE__*/React.createElement(Form.Label, null, "Field label")), /*#__PURE__*/React.createElement(Form.Field.Body, null, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, {
    type: "text",
    placeholder: "Field control - text input"
  })), /*#__PURE__*/React.createElement(Form.Help, null, "Help text for this field")))), /*#__PURE__*/React.createElement(Form.Field, {
    horizontal: true
  }, /*#__PURE__*/React.createElement(Form.Field.Label, null, /*#__PURE__*/React.createElement(Form.Label, null, "Field label")), /*#__PURE__*/React.createElement(Form.Field.Body, null, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Textarea, {
    type: "text",
    placeholder: "Field control - Aread"
  })))))));
};
Field.argTypes = {
  size: {
    control: {
      type: 'select',
      options: ['small', 'medium', 'large']
    }
  }
};
export var Control = function Control(_ref) {
  var iconLeft = _ref.iconLeft,
      iconRight = _ref.iconRight,
      args = _objectWithoutProperties(_ref, ["iconLeft", "iconRight"]);

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Username"), /*#__PURE__*/React.createElement(Form.Control, args, /*#__PURE__*/React.createElement(Form.Input, {
    type: "text",
    placeholder: "e.g. John Doe"
  }), iconLeft && /*#__PURE__*/React.createElement(Icon, {
    align: "left"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-user"
  })), iconRight && /*#__PURE__*/React.createElement(Icon, {
    align: "right"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-check"
  })))), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Username"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Select, null, /*#__PURE__*/React.createElement("option", null, "Option 1"), /*#__PURE__*/React.createElement("option", null, "Option 2"), /*#__PURE__*/React.createElement("option", null, "Option 3")), /*#__PURE__*/React.createElement(Icon, {
    align: "left"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-globe"
  })))));
};
Control.argTypes = {
  size: {
    control: {
      type: 'select',
      options: ['small', 'medium', 'large']
    }
  },
  iconLeft: {
    defaultValue: true,
    control: {
      type: 'boolean'
    }
  },
  iconRight: {
    defaultValue: true,
    control: {
      type: 'boolean'
    }
  },
  loading: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  fullwidth: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  }
};
export var InputExample = function InputExample(args) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Username"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, _extends({
    type: "text"
  }, args, {
    placeholder: "e.g. John Doe"
  })))), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Password"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Input, _extends({}, args, {
    type: "password",
    placeholder: "password"
  })))));
};
InputExample.argTypes = {
  size: {
    control: {
      type: 'select',
      options: ['small', 'medium', 'large']
    }
  },
  color: {
    control: {
      type: 'select',
      options: Object.values(CONSTANTS.COLORS)
    }
  },
  status: {
    control: {
      type: 'select',
      options: ['focus', 'hover']
    }
  },
  readOnly: {
    control: {
      type: 'boolean'
    }
  },
  isStatic: {
    control: {
      type: 'boolean'
    }
  },
  disabled: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  rounded: {
    control: {
      type: 'boolean'
    }
  }
};
export var TextAreaExample = function TextAreaExample(args) {
  return /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Textarea, _extends({}, args, {
    placeholder: "I am a textarea",
    size: args.size === 'default' ? null : args.size
  }))));
};
TextAreaExample.argTypes = {
  size: {
    control: {
      type: 'select',
      options: ['default', 'small', 'medium', 'large']
    }
  },
  color: {
    control: {
      type: 'select',
      options: ['default'].concat(_toConsumableArray(Object.values(CONSTANTS.COLORS)))
    }
  },
  rows: {
    control: {
      type: 'number'
    }
  },
  status: {
    control: {
      type: 'select',
      options: ['focus', 'hover']
    }
  },
  readOnly: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  disabled: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  fixedSize: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  }
};
export var SelectExample = function SelectExample(_ref2) {
  var withIcon = _ref2.withIcon,
      args = _objectWithoutProperties(_ref2, ["withIcon"]);

  var _React$useState = React.useState('option1'),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      selectedOption = _React$useState2[0],
      setSelectedOption = _React$useState2[1];

  React.useEffect(function () {
    if (args.multiple) {
      setSelectedOption([]);
      return;
    }

    setSelectedOption('option1');
  }, [args.multiple]);
  return /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Label, null, "Select an option"), /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Select, _extends({}, args, {
    size: args.size === 'default' ? null : args.size,
    value: selectedOption,
    onChange: function onChange(e) {
      var value = e.target.value;

      if (args.multiple) {
        setSelectedOption(Array.from(e.target.selectedOptions, function (option) {
          return option.value;
        }));
        return;
      }

      setSelectedOption(value);
    }
  }), /*#__PURE__*/React.createElement("option", {
    value: "option1"
  }, "Option 1"), /*#__PURE__*/React.createElement("option", {
    value: "option2"
  }, "Option 2")), withIcon && /*#__PURE__*/React.createElement(Icon, {
    align: "left"
  }, /*#__PURE__*/React.createElement("i", {
    className: "fas fa-user"
  }))));
};
SelectExample.argTypes = {
  color: {
    description: 'Color of this dropdown',
    defaultValue: undefined,
    control: {
      type: 'select',
      options: Object.values(CONSTANTS.COLORS)
    }
  },
  size: {
    description: 'The size of this dropdown',
    defaultValue: undefined,
    control: {
      type: 'select',
      options: ['default', 'small', 'medium', 'large']
    }
  },
  rounded: {
    description: 'Whether the dropdown button should have fully rounded corners.',
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  disabled: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  loading: {
    description: 'Whether a loading spinner should be shown in place of the dropdown arrow',
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  multiple: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  status: {
    defaultValue: false,
    control: {
      type: 'select',
      options: ['focus', 'hover']
    }
  },
  withIcon: {
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  }
};
export var CheckboxExample = function CheckboxExample(args) {
  return /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Checkbox, args, "Remember me")));
};
CheckboxExample.argTypes = {
  disabled: {
    control: {
      type: 'boolean'
    }
  }
};
export var RadioExample = function RadioExample() {
  var _useState13 = useState('yes'),
      _useState14 = _slicedToArray(_useState13, 2),
      selectedValue = _useState14[0],
      setSelectedValue = _useState14[1];

  var onChange = function onChange(e) {
    return setSelectedValue(e.target.value);
  };

  return /*#__PURE__*/React.createElement(Form.Control, null, /*#__PURE__*/React.createElement(Form.Radio, {
    value: "yes",
    name: "story-radio-name",
    checked: selectedValue === 'yes',
    onChange: onChange
  }, "Yes"), /*#__PURE__*/React.createElement(Form.Radio, {
    value: "no",
    name: "story-radio-name",
    checked: selectedValue === 'no',
    onChange: onChange
  }, "No"), /*#__PURE__*/React.createElement(Form.Radio, {
    name: "story-radio-name",
    disabled: true,
    onChange: onChange
  }, "I am disabled"));
};
export var InputExampleExample = function InputExampleExample(_ref3) {
  var withIcon = _ref3.withIcon,
      args = _objectWithoutProperties(_ref3, ["withIcon"]);

  var _useState15 = useState(),
      _useState16 = _slicedToArray(_useState15, 2),
      uploadedFile = _useState16[0],
      setUploadedFile = _useState16[1];

  return /*#__PURE__*/React.createElement(Form.InputFile, _extends({}, args, {
    value: uploadedFile,
    icon: withIcon ? /*#__PURE__*/React.createElement("i", {
      className: "fas fa-upload"
    }) : undefined,
    onChange: function onChange(e) {
      setUploadedFile(e.target.files);
    }
  }));
};
InputExampleExample.argTypes = {
  color: {
    defaultValue: undefined,
    control: {
      type: 'select',
      options: Object.values(CONSTANTS.COLORS)
    }
  },
  size: {
    description: 'The size of this InputFile',
    defaultValue: undefined,
    control: {
      type: 'select',
      options: ['default', 'small', 'medium', 'large']
    }
  },
  align: {
    control: {
      type: 'select',
      options: ['center', 'right']
    }
  },
  boxed: {
    description: 'Whether this InputFile should be a box',
    defaultValue: false,
    control: {
      type: 'boolean'
    }
  },
  label: {
    description: 'The label of the upload button',
    defaultValue: 'Choose a file...',
    control: {
      type: 'text'
    }
  },
  filename: {
    control: {
      type: 'text'
    }
  },
  withIcon: {
    control: {
      type: 'boolean'
    }
  }
};
//# sourceMappingURL=form.story.js.map