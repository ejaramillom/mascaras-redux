{"version":3,"sources":["../../../../src/components/form/components/input.js"],"names":["React","PropTypes","classnames","CONSTANTS","Element","useFieldContext","colors","concat","Object","values","COLORS","Input","className","size","color","readOnly","isStatic","status","rounded","props","context","calculatedSize","propTypes","oneOf","bool","disabled","renderAs","oneOfType","func","string","object","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AAEA,IAAMC,MAAM,GAAG,CAAC,IAAD,EAAOC,MAAP,CAAcC,MAAM,CAACC,MAAP,CAAcN,SAAS,CAACO,MAAxB,CAAd,CAAf;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OASR;AAAA;;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,OAAO,GAAGf,eAAe,EAA/B;AACA,MAAMgB,cAAc,GAAGR,IAAI,IAAIO,OAAO,CAACP,IAAvC;AACA,sBACE,oBAAC,OAAD,eACMM,KADN;AAEE,IAAA,QAAQ,EAAEJ,QAAQ,IAAIC,QAFxB;AAGE,IAAA,SAAS,EAAEd,UAAU,CAAC,OAAD,EAAUU,SAAV;AACnB,mBAAaI;AADM,iDAEZC,MAFY,SAECA,MAFD,gCAGnB,YAHmB,EAGLC,OAHK,6CAIZG,cAJY,GAIOA,cAJP,6CAKZP,KALY,GAKFA,KALE;AAHvB,KADF;AAaD,CAzBD;;AA2BAH,KAAK,CAACW,SAAN,GAAkB;AAChB;;;AAGAT,EAAAA,IAAI,EAAEZ,SAAS,CAACsB,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAhB,CAJU;;AAKhB;;;AAGAT,EAAAA,KAAK,EAAEb,SAAS,CAACsB,KAAV,CAAgBjB,MAAhB,CARS;;AAShB;;;;AAIAS,EAAAA,QAAQ,EAAEd,SAAS,CAACuB,IAbJ;;AAchB;;;;;AAKAR,EAAAA,QAAQ,EAAEf,SAAS,CAACuB,IAnBJ;AAoBhBP,EAAAA,MAAM,EAAEhB,SAAS,CAACsB,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB,CApBQ;;AAqBhB;;;;AAIAL,EAAAA,OAAO,EAAEjB,SAAS,CAACuB,IAzBH;AA0BhBC,EAAAA,QAAQ,EAAExB,SAAS,CAACuB,IA1BJ;AA2BhBE,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B,SAAV,CAAoB,CAC5B1B,SAAS,CAAC2B,IADkB,EAE5B3B,SAAS,CAAC4B,MAFkB,EAG5B5B,SAAS,CAAC6B,MAHkB,CAApB;AA3BM,CAAlB;AAkCAnB,KAAK,CAACoB,YAAN,GAAqB;AACnBL,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIA,eAAef,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nimport useFieldContext from './field/context';\n\nconst colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nconst Input = ({\n  className,\n  size,\n  color,\n  readOnly,\n  isStatic,\n  status,\n  rounded,\n  ...props\n}) => {\n  const context = useFieldContext();\n  const calculatedSize = size || context.size;\n  return (\n    <Element\n      {...props}\n      readOnly={readOnly || isStatic}\n      className={classnames('input', className, {\n        'is-static': isStatic,\n        [`is-${status}ed`]: status,\n        'is-rounded': rounded,\n        [`is-${calculatedSize}`]: calculatedSize,\n        [`is-${color}`]: color,\n      })}\n    />\n  );\n};\n\nInput.propTypes = {\n  /**\n   * Adjusts the size of this input.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n  /**\n   * Whether this input should be read-only.\n   * Equivalent to the readonly attribute of the `<input>` element.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether this input should be static.\n   * If true, this input will be readonly, and all the input decorations\n   * are removed.\n   */\n  isStatic: PropTypes.bool,\n  status: PropTypes.oneOf(['focus', 'hover']),\n  /**\n   * Whether this input is rounded. The input will have a 50% border-radius,\n   * making the left and right side fully rounded.\n   */\n  rounded: PropTypes.bool,\n  disabled: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nInput.defaultProps = {\n  renderAs: 'input',\n};\n\nexport default Input;\n"],"file":"input.js"}