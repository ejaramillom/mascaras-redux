{"version":3,"sources":["../../../../src/components/form/components/select.js"],"names":["React","PropTypes","classnames","CONSTANTS","Element","useFieldContext","colors","concat","Object","values","COLORS","Select","className","rounded","style","size","color","loading","status","disabled","value","multiple","children","name","domRef","props","defaultValue","context","calculatedSize","undefined","propTypes","oneOf","bool","statusred","oneOfType","array","string","number","renderAs","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nimport useFieldContext from './field/context';\n\nconst colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nconst Select = ({\n  className,\n  rounded,\n  style,\n  size,\n  color,\n  loading,\n  status,\n  disabled,\n  value,\n  multiple,\n  children,\n  name,\n  domRef,\n  ...props\n}) => {\n  /**\n   * Return default value for value prop\n   */\n  const defaultValue = multiple ? [] : '';\n  const context = useFieldContext();\n  const calculatedSize = size || context.size;\n\n  return (\n    <Element\n      domRef={domRef}\n      className={classnames('select', className, {\n        [`is-${calculatedSize}`]: calculatedSize,\n        [`is-${color}`]: color,\n        'is-loading': loading,\n        'is-multiple': multiple,\n        'is-rounded': rounded,\n      })}\n      style={style}\n    >\n      <Element\n        {...props}\n        className={classnames({\n          [`is-${status}ed`]: status,\n        })}\n        multiple={multiple}\n        value={value !== undefined ? value : defaultValue}\n        disabled={disabled}\n        name={name}\n      >\n        {children}\n      </Element>\n    </Element>\n  );\n};\n\nSelect.propTypes = {\n  /**\n   * Adjusts the size of this component.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * Adjusts the color of this component.\n   */\n  color: PropTypes.oneOf(colors),\n  /**\n   * Whether the dropdown button should have fully rounded corners.\n   */\n  rounded: PropTypes.bool,\n  disabled: PropTypes.bool,\n  /**\n   * Whether the `<select>` element should accept multiple values.\n   * If true, then the `value` prop can only accept an array.\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Whether a loading spinner should be shown in place of the dropdown arrow\n   */\n  loading: PropTypes.bool,\n  /**\n   * Whether this component is hovered.\n   */\n  statusred: PropTypes.oneOf(['hover', 'focus']),\n  /**\n   * The value that is held by the `<select>` element.\n   * Must be an array if `multiple` prop is true.\n   *\n   * If this prop is undefined, an empty string will be the default value\n   * of `<select>`, or an empty array if `multiple` is true.\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.array,\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  /**\n   * The name of the input field.\n   * Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nSelect.defaultProps = {\n  renderAs: 'select',\n};\n\nexport default Select;\n"],"file":"select.js"}