function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable react/prop-types */
import React from 'react';
import { Columns, Notification } from '../../..';
import Box from '../../box';
import CONSTANTS from '../constants';
import GLOBAL_CONSTANTS from '../../../constants';
import Message from '../../message';
var message = /*#__PURE__*/React.createElement(Message, {
  color: "info"
}, /*#__PURE__*/React.createElement(Message.Body, null, "Try playing with the viewport option on the top and the breakpoint control on the bottom in the Canvas Tab"));
var options = {
  sizes: ['default', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].concat(Object.values(CONSTANTS.SIZES)),
  breakpoints: ['default'].concat(Object.values(GLOBAL_CONSTANTS.BREAKPOINTS))
};
export var Basic = function Basic() {
  return /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "First Column")), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Second Column")), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Third Column")), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Fourth Column")));
};
export var Sizes = function Sizes(_ref) {
  var size = _ref.size,
      narrow = _ref.narrow,
      offset = _ref.offset;
  return /*#__PURE__*/React.createElement(React.Fragment, null, message, /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, {
    size: size
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Size: ", size)), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, null, "Auto"))), /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, {
    size: 2
  }, /*#__PURE__*/React.createElement(Notification, null, "2")), /*#__PURE__*/React.createElement(Columns.Column, {
    narrow: narrow,
    color: "primary"
  }, /*#__PURE__*/React.createElement(Notification, null, narrow ? 'Narrow' : 'Flexible'))), /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, {
    size: 4,
    offset: offset
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "size: 4 and offset ", offset))));
};
Sizes.args = {
  narrow: false
};
Sizes.argTypes = {
  size: {
    control: {
      type: 'select',
      options: options.sizes
    },
    defaultValue: 4
  },
  offset: {
    control: {
      type: 'select',
      options: options.sizes
    },
    defaultValue: 4
  }
};
export var Responsiveness = function Responsiveness(_ref2) {
  var mobile = _ref2.mobile,
      tablet = _ref2.tablet,
      desktop = _ref2.desktop,
      widescreen = _ref2.widescreen,
      fullhd = _ref2.fullhd,
      breakpoint = _ref2.breakpoint;
  return /*#__PURE__*/React.createElement(React.Fragment, null, message, /*#__PURE__*/React.createElement(Notification, {
    style: {
      marginBottom: '1.5rem'
    }
  }, "with ", /*#__PURE__*/React.createElement("b", null, "breakpoint=\"", breakpoint, "\""), " the columns will be active on all sizes equal or greater than the breakpoint"), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Columns, {
    breakpoint: breakpoint
  }, /*#__PURE__*/React.createElement(Columns.Column, {
    mobile: mobile,
    tablet: tablet,
    desktop: desktop,
    widescreen: widescreen,
    fullhd: fullhd
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, /*#__PURE__*/React.createElement("p", null, "I'm responsive"))), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "Auto")))));
};
Responsiveness.args = {
  breakpoint: 'tablet',
  mobile: {
    size: 8,
    offset: 2,
    narrow: false,
    textAlign: 'center',
    textSize: 3
  },
  tablet: {
    size: 6,
    offset: 3,
    narrow: false
  },
  desktop: {
    size: 4,
    offset: 4,
    narrow: false
  },
  widescreen: {
    size: 2,
    offset: 5,
    narrow: false
  },
  fullhd: {
    size: 3,
    offset: 0,
    narrow: false
  }
};
Responsiveness.argTypes = {
  breakpoint: {
    control: {
      type: 'select',
      options: options.breakpoints
    }
  }
};
export var Nesting = function Nesting() {
  return /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "0"), /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "1"), /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, {
    size: "half"
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "danger"
  }, "2")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: "half"
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "danger"
  }, "2")))), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "1")))), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "0"), /*#__PURE__*/React.createElement(Columns, null, /*#__PURE__*/React.createElement(Columns.Column, {
    size: "two-thirds"
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "1")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: "one-third"
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "1")), /*#__PURE__*/React.createElement(Columns.Column, null, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "1")))));
};
export var Gaps = function Gaps(_ref3) {
  var mobile = _ref3.mobile,
      tablet = _ref3.tablet,
      touch = _ref3.touch,
      desktop = _ref3.desktop,
      widescreen = _ref3.widescreen,
      fullhd = _ref3.fullhd,
      args = _objectWithoutProperties(_ref3, ["mobile", "tablet", "touch", "desktop", "widescreen", "fullhd"]);

  return /*#__PURE__*/React.createElement(React.Fragment, null, message, /*#__PURE__*/React.createElement(Columns, _extends({}, args, {
    mobile: mobile && {
      gap: mobile
    },
    tablet: tablet && {
      gap: tablet
    },
    touch: touch && {
      gap: touch
    },
    desktop: desktop && {
      gap: desktop
    },
    widescreen: widescreen && {
      gap: widescreen
    },
    fullhd: fullhd && {
      gap: fullhd
    }
  }), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 3
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Size 3")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 3
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Size 3")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 3
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Size 3")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 3
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "primary"
  }, "Size 3"))));
};
Gaps.argTypes = {
  gap: {
    control: {
      type: 'select',
      options: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    }
  },
  mobile: {
    control: {
      type: 'select',
      options: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    }
  },
  tablet: {
    control: {
      type: 'select',
      options: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    }
  },
  desktop: {
    control: {
      type: 'select',
      options: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    }
  },
  widescreen: {
    control: {
      type: 'select',
      options: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    }
  },
  fullhd: {
    control: {
      type: 'select',
      options: [0, 1, 2, 3, 4, 5, 6, 7, 8]
    }
  }
};
export var Options = function Options(_ref4) {
  var vCentered = _ref4.vCentered,
      centered = _ref4.centered,
      multiline = _ref4.multiline;
  return /*#__PURE__*/React.createElement(React.Fragment, null, message, /*#__PURE__*/React.createElement(Columns, {
    vCentered: vCentered,
    centered: centered,
    multiline: multiline
  }, /*#__PURE__*/React.createElement(Columns.Column, {
    size: 7
  }, /*#__PURE__*/React.createElement(Notification, null, /*#__PURE__*/React.createElement("p", null, "7"))), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 5
  }, /*#__PURE__*/React.createElement(Notification, null, /*#__PURE__*/React.createElement("p", {
    style: {
      minHeight: '3rem'
    }
  }, "5"))), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 3
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "success"
  }, "3")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 4
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "success"
  }, "4")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 3
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "success"
  }, "3")), /*#__PURE__*/React.createElement(Columns.Column, {
    narrow: true
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "Narrow Column")), /*#__PURE__*/React.createElement(Columns.Column, {
    narrow: true
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "Narrow Column")), /*#__PURE__*/React.createElement(Columns.Column, {
    narrow: true
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "Narrow Column")), /*#__PURE__*/React.createElement(Columns.Column, {
    narrow: true
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "Narrow Column")), /*#__PURE__*/React.createElement(Columns.Column, {
    size: 4
  }, /*#__PURE__*/React.createElement(Notification, {
    color: "info"
  }, "4"))));
};
Options.args = {
  vCentered: false,
  centered: false,
  multiline: true
};
//# sourceMappingURL=columns.story.js.map