function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import CONSTANTS from '../constants';
import Element from '../../element';
var sizes = [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].concat(Object.values(CONSTANTS.SIZES));

var Column = function Column(_ref) {
  var _classNames;

  var children = _ref.children,
      className = _ref.className,
      size = _ref.size,
      offset = _ref.offset,
      narrow = _ref.narrow,
      _ref$mobile = _ref.mobile,
      mobile = _ref$mobile === void 0 ? {} : _ref$mobile,
      _ref$tablet = _ref.tablet,
      tablet = _ref$tablet === void 0 ? {} : _ref$tablet,
      _ref$desktop = _ref.desktop,
      desktop = _ref$desktop === void 0 ? {} : _ref$desktop,
      _ref$widescreen = _ref.widescreen,
      widescreen = _ref$widescreen === void 0 ? {} : _ref$widescreen,
      _ref$fullhd = _ref.fullhd,
      fullhd = _ref$fullhd === void 0 ? {} : _ref$fullhd,
      _ref$touch = _ref.touch,
      touch = _ref$touch === void 0 ? {} : _ref$touch,
      props = _objectWithoutProperties(_ref, ["children", "className", "size", "offset", "narrow", "mobile", "tablet", "desktop", "widescreen", "fullhd", "touch"]);

  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {
    mobile: mobile,
    tablet: tablet,
    desktop: desktop,
    widescreen: widescreen,
    fullhd: fullhd,
    touch: touch
  }, {
    className: classNames(className, 'column', (_classNames = {}, _defineProperty(_classNames, "is-".concat(size), size), _defineProperty(_classNames, "is-".concat(touch.size, "-mobile"), touch.size), _defineProperty(_classNames, "is-".concat(mobile.size, "-mobile"), mobile.size), _defineProperty(_classNames, "is-".concat(tablet.size, "-tablet"), tablet.size), _defineProperty(_classNames, "is-".concat(desktop.size, "-desktop"), desktop.size), _defineProperty(_classNames, "is-".concat(widescreen.size, "-widescreen"), widescreen.size), _defineProperty(_classNames, "is-".concat(fullhd.size, "-fullhd"), fullhd.size), _defineProperty(_classNames, "is-offset-".concat(touch.offset, "-mobile"), touch.offset), _defineProperty(_classNames, "is-offset-".concat(mobile.offset, "-mobile"), mobile.offset), _defineProperty(_classNames, "is-offset-".concat(tablet.offset, "-tablet"), tablet.offset), _defineProperty(_classNames, "is-offset-".concat(desktop.offset, "-desktop"), desktop.offset), _defineProperty(_classNames, "is-offset-".concat(widescreen.offset, "-widescreen"), widescreen.offset), _defineProperty(_classNames, "is-offset-".concat(fullhd.offset, "-fullhd"), fullhd.offset), _defineProperty(_classNames, "is-offset-".concat(offset), offset), _defineProperty(_classNames, 'is-narrow', narrow), _defineProperty(_classNames, 'is-narrow-touch', touch.narrow), _defineProperty(_classNames, 'is-narrow-mobile', mobile.narrow), _defineProperty(_classNames, 'is-narrow-tablet', tablet.narrow), _defineProperty(_classNames, 'is-narrow-desktop', desktop.narrow), _defineProperty(_classNames, 'is-narrow-widescreen', widescreen.narrow), _defineProperty(_classNames, 'is-narrow-fullhd', fullhd.narrow), _classNames))
  }), children);
};

Column.propTypes = {
  /**
   * The size the column should take. Possible values depends on the sizing method used.
   * See [below](#sizes) for more details.
   */
  size: PropTypes.oneOf(sizes),

  /**
   * The amount of offset from the left side of `<Columns />`.
   * Possible values depends on the sizing method used.
   * See [below](#offset) for more details.
   */
  offset: PropTypes.oneOf(sizes),

  /**
   * If you want a column to only take the space it needs, use the narrow modifier. The other column(s) will fill up the remaining space.
   */
  narrow: PropTypes.bool,

  /**
   * Size, Offset and Narrow props for touch devices (This props are merge with the default responsive props)
   */
  touch: PropTypes.shape({
    size: PropTypes.oneOf(sizes),
    offset: PropTypes.oneOf(sizes),
    narrow: PropTypes.bool
  }),

  /**
   * Size, Offset and Narrow props for Mobile devices (This props are merge with the default responsive props)
   */
  mobile: PropTypes.shape({
    size: PropTypes.oneOf(sizes),
    offset: PropTypes.oneOf(sizes),
    narrow: PropTypes.bool
  }),

  /**
   * Size, Offset and Narrow props for Tablet devices (This props are merge with the default responsive props)
   */
  tablet: PropTypes.shape({
    size: PropTypes.oneOf(sizes),
    offset: PropTypes.oneOf(sizes),
    narrow: PropTypes.bool
  }),

  /**
   * Size, Offset and Narrow props for Desktop devices (This props are merge with the default responsive props)
   */
  desktop: PropTypes.shape({
    size: PropTypes.oneOf(sizes),
    offset: PropTypes.oneOf(sizes),
    narrow: PropTypes.bool
  }),

  /**
   * Size, Offset and Narrow props for WideScreen devices (This props are merge with the default responsive props)
   */
  widescreen: PropTypes.shape({
    size: PropTypes.oneOf(sizes),
    offset: PropTypes.oneOf(sizes),
    narrow: PropTypes.bool
  }),

  /**
   * Size, Offset and Narrow props for FullHD devices (This props are merge with the default responsive props)
   */
  fullhd: PropTypes.shape({
    size: PropTypes.oneOf(sizes),
    offset: PropTypes.oneOf(sizes),
    narrow: PropTypes.bool
  })
};
Column.defaultProps = {};
export default Column;
//# sourceMappingURL=column.js.map