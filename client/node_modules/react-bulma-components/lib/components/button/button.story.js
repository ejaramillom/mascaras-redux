function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable react/prop-types */
import React from 'react';
import { Button, Box } from '../..';
import CONSTANTS from '../../constants';
export var Default = function Default(_ref) {
  var hasAddons = _ref.hasAddons,
      groupSize = _ref.groupSize,
      align = _ref.align,
      args = _objectWithoutProperties(_ref, ["hasAddons", "groupSize", "align"]);

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button, args, "Button")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Button.Group, {
    hasAddons: hasAddons,
    align: align === 'default' ? '' : align,
    size: groupSize === 'default' ? '' : groupSize
  }, /*#__PURE__*/React.createElement(Button, {
    renderAs: "span",
    color: "success"
  }, "Save changes"), /*#__PURE__*/React.createElement(Button, {
    renderAs: "span",
    color: "info"
  }, "Save and continue"), /*#__PURE__*/React.createElement(Button, {
    renderAs: "span",
    color: "danger"
  }, "Cancel"))));
};
Default.argTypes = {
  hasAddons: {
    table: {
      category: 'Button Group'
    },
    "default": false,
    control: {
      type: 'boolean'
    }
  },
  align: {
    table: {
      category: 'Button Group'
    },
    control: {
      type: 'select',
      options: ['default', 'center', 'right']
    }
  },
  groupSize: {
    table: {
      category: 'Button Group'
    },
    control: {
      type: 'select',
      options: ['default', 'small', 'medium', 'large']
    }
  },
  remove: {
    table: {
      category: 'Button'
    },
    control: {
      type: 'boolean'
    }
  },
  size: {
    table: {
      category: 'Button'
    },
    control: {
      type: 'select',
      options: ['default', 'small', 'medium', 'large']
    }
  },
  colorVariant: {
    table: {
      category: 'Button'
    },
    description: 'Variant of the color scheme',
    control: {
      type: 'select',
      options: Object.values(CONSTANTS.COLOR_VARIANT)
    }
  },
  fullwidth: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should take up the entire parent width',
    control: {
      type: 'boolean'
    }
  },
  color: {
    table: {
      category: 'Button'
    },
    description: 'Color of the button',
    defaultValue: '',
    control: {
      type: 'select',
      options: Object.values(CONSTANTS.COLORS)
    }
  },
  outlined: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should have an outlined style',
    "default": false,
    control: {
      type: 'boolean'
    }
  },
  inverted: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should have an inverted color scheme. Useful when button is used on colored background',
    "default": false,
    control: {
      type: 'boolean'
    }
  },
  disabled: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should be disabled',
    "default": false,
    control: {
      type: 'boolean'
    }
  },
  text: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should have a text button style',
    "default": false,
    control: {
      type: 'boolean'
    }
  },
  isStatic: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should be non-interactive',
    "default": false,
    control: {
      type: 'boolean'
    }
  },
  rounded: {
    table: {
      category: 'Button'
    },
    description: 'Whether the button should have fully-rounded corners',
    "default": false,
    control: {
      type: 'boolean'
    }
  }
};
//# sourceMappingURL=button.story.js.map