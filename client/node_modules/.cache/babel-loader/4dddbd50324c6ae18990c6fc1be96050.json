{"ast":null,"code":"var _jsxFileName = \"/home/leon/Documentos/proyectos/react/mascaras/client/src/components/OpenModal.component.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport Modal from \"react-bulma-components/lib/components/modal\";\nimport Button from \"react-bulma-components/lib/components/button\";\nimport Section from \"react-bulma-components/lib/components/section\";\nimport axios from \"axios\";\nimport { getBrushes, getWipers, getCaps } from \"../middlewares/services\";\nimport { useQuery } from \"react-query\";\nimport \"../App.css\"; //---------------- Modal main definition\n\nexport class OpenModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      show: false\n    };\n\n    this.open = () => this.setState({\n      show: true\n    });\n\n    this.close = () => this.setState({\n      show: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      onClick: this.open,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, \" \", this.props.name, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Modal, Object.assign({\n      show: this.state.show,\n      onClose: this.close\n    }, this.props.modal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }), this.props.children));\n  }\n\n} //---------------- Modal main definition\n//---------------- Bottle modal\n\nOpenModal.propTypes = {\n  modal: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  name: PropTypes.string\n};\nOpenModal.defaultProps = {\n  modal: {},\n  name: \"name\"\n};\nexport const BottleModal = props => {\n  const [bottles, setBottles] = useState([]);\n  const rod = props.rod;\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await axios.get(\"/bottle\").catch(function (error) {\n        console.log(error);\n      });\n      setBottles(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const addBottle = async data => {\n    await axios.post(\"/bottle\", {\n      name: data.name,\n      drawing: data.drawing,\n      mold: data.mold,\n      depth: data.depth,\n      thread: data.thread\n    }).then(function (response) {\n      if (response.status === 200) {\n        alert(\"Bottle added to the list!\");\n        console.log(\"Succesfully added\");\n      } else {\n        const err = new Error(response.error);\n        console.log(err);\n        throw err;\n      }\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  if (rod && rod.thread) {\n    const filteredBottles = bottles.filter(element => {\n      return element.thread.toLowerCase().indexOf(rod.thread.toLowerCase()) !== -1;\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpenModal, {\n      modal: {\n        closeOnBlur: false\n      },\n      name: \"Bottle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, filteredBottles.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Section, {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, element.name), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 54\n      }\n    }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"info\",\n      onClick: () => {\n        addBottle(element);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }\n    }, \"Add Bottle\")))))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: false\n    },\n    name: \"Bottle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, bottles.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }, element.name), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 52\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"info\",\n    onClick: () => {\n      addBottle(element);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, \"Add Bottle\")))))));\n}; //---------------- Bottle modal\n//---------------- Brush modal\n\nexport const BrushModal = () => {\n  const [brushes, setBrushes] = useState([]);\n  const rod = props.rod;\n  const bottle = props.bottle;\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await axios.get(\"/rod\").catch(function (error) {\n        console.log(error);\n      });\n      setBottles(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const addBrush = async data => {\n    await axios.post(\"/brush\", {\n      brush: data.brush,\n      original: data.original,\n      shaftLength: data.shaftLength,\n      shaftDiameter: data.shaftDiameter,\n      brushLength: data.brushLength,\n      brushDiameter: data.brushDiameter,\n      type: data.type\n    }).then(function (response) {\n      if (response.status === 200) {\n        alert(\"Brush added to the list!\");\n        console.log(\"Succesfully added\");\n      } else {\n        const err = new Error(response.error);\n        console.log(err);\n        throw err;\n      }\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"brushes\", getBrushes);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: false\n    },\n    name: \"Brush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, element.brush), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 50\n    }\n  }, element.type), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"info\",\n    onClick: () => {\n      addBrush(element);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, \"Add Brush\")))))));\n}; //---------------- Brush modal\n//---------------- Rod modal\n\nexport const RodModal = props => {\n  const [rods, setRods] = useState([]);\n  const bottle = props.bottle;\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await axios.get(\"/rod\").catch(function (error) {\n        console.log(error);\n      });\n      setRods(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const addRod = async data => {\n    await axios.post(\"/rod\", {\n      name: data.name,\n      drawing: data.drawing,\n      thread: data.thread,\n      dimensions: {\n        length: data.dimensions.length,\n        rodDiameter: data.dimensions.rodDiameter,\n        brushDiameter: data.dimensions.brushDiameter\n      }\n    }).then(function (response) {\n      if (response.status === 200) {\n        alert(\"Rod added to the list!\");\n        console.log(\"Succesfully added\");\n      } else {\n        const err = new Error(response.error);\n        console.log(err);\n        throw err;\n      }\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  if (bottle && bottle.thread) {\n    const filteredRods = rods.filter(element => {\n      if (element.thread) {\n        return element.thread.toLowerCase().indexOf(bottle.thread.toLowerCase()) !== -1;\n      } else {\n        return element;\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(OpenModal, {\n      modal: {\n        closeOnBlur: false\n      },\n      name: \"Rod\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }\n    }, filteredRods.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Section, {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }\n    }, element.name), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    }, element.thread), \" \", /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 49\n      }\n    }, element.drawing), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"info\",\n      onClick: () => {\n        addRod(element);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 15\n      }\n    }, \"Add Rod\")))))));\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: false\n    },\n    name: \"Rod\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }\n  }, rods.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 15\n    }\n  }, element.name), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 15\n    }\n  }, element.thread), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 47\n    }\n  }, element.drawing), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"info\",\n    onClick: () => {\n      addRod(element);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 13\n    }\n  }, \"Add Rod\")))))));\n}; //---------------- Rod modal\n//---------------- Wiper modal\n\nexport const WiperModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"wipers\", getWipers);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Wiper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 49\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 17\n    }\n  }), \"Something else\"))))));\n}; //---------------- Wiper modal\n//---------------- Cap modal\n\nexport const CapModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"caps\", getCaps);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Wiper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 17\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 49\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 17\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 17\n    }\n  }), \"Something else\"))))));\n}; //---------------- Cap modal","map":{"version":3,"sources":["/home/leon/Documentos/proyectos/react/mascaras/client/src/components/OpenModal.component.js"],"names":["React","useState","useEffect","PropTypes","Modal","Button","Section","axios","getBrushes","getWipers","getCaps","useQuery","OpenModal","Component","state","show","open","setState","close","render","props","name","modal","children","propTypes","object","node","isRequired","string","defaultProps","BottleModal","bottles","setBottles","rod","fetchData","data","get","catch","error","console","log","addBottle","post","drawing","mold","depth","thread","then","response","status","alert","err","Error","filteredBottles","filter","element","toLowerCase","indexOf","closeOnBlur","map","backgroundColor","BrushModal","brushes","setBrushes","bottle","addBrush","brush","original","shaftLength","shaftDiameter","brushLength","brushDiameter","type","isLoading","message","RodModal","rods","setRods","addRod","dimensions","length","rodDiameter","filteredRods","WiperModal","CapModal"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport PropTypes from \"prop-types\";\nimport Modal from \"react-bulma-components/lib/components/modal\";\nimport Button from \"react-bulma-components/lib/components/button\";\nimport Section from \"react-bulma-components/lib/components/section\";\nimport axios from \"axios\";\nimport {\n  getBrushes,\n  getWipers,\n  getCaps,\n} from \"../middlewares/services\";\nimport { useQuery } from \"react-query\";\nimport \"../App.css\";\n\n//---------------- Modal main definition\n\nexport class OpenModal extends React.Component {\n  static propTypes = {\n    modal: PropTypes.object,\n    children: PropTypes.node.isRequired,\n    name: PropTypes.string,\n  };\n\n  static defaultProps = {\n    modal: {},\n    name: \"name\",\n  };\n\n  state = {\n    show: false,\n  };\n\n  open = () => this.setState({ show: true });\n  close = () => this.setState({ show: false });\n\n  render() {\n    return (\n      <div>\n        <Button color=\"dark\" onClick={this.open}>\n          {\" \"}\n          {this.props.name}{\" \"}\n        </Button>\n        <br />\n        <Modal\n          show={this.state.show}\n          onClose={this.close}\n          {...this.props.modal}\n        >\n          {this.props.children}\n        </Modal>\n      </div>\n    );\n  }\n}\n\n//---------------- Modal main definition\n\n//---------------- Bottle modal\n\nexport const BottleModal = (props) => {\n  const [bottles, setBottles] = useState([]);\n  const rod = props.rod;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const {data} = await axios.get(\"/bottle\")\n      .catch(function (error) {\n        console.log(error)\n      });\n      setBottles(data);\n    }\n    fetchData();\n  }, []);\n\n  const addBottle = async (data) => {\n    await axios.post(\"/bottle\", {\n      name: data.name,\n      drawing: data.drawing,\n      mold: data.mold,\n      depth: data.depth,\n      thread: data.thread\n    })\n    .then(function (response) {\n      if (response.status === 200) {\n        alert(\"Bottle added to the list!\");\n        console.log(\"Succesfully added\");\n      } else {\n        const err = new Error(response.error);\n        console.log(err);\n        throw err;\n      }\n    })\n    .catch(function (error) {\n      alert(error);\n    });\n  };\n\n  if (rod && rod.thread){\n    const filteredBottles = bottles.filter( element => {\n      return element.thread.toLowerCase().indexOf(rod.thread.toLowerCase()) !== -1;\n    });\n\n    return (\n      <div>\n        <OpenModal modal={{ closeOnBlur: false }} name=\"Bottle\">\n          <div className=\"modal-body\">\n            {filteredBottles.map((element) => (\n              <Modal.Content>\n                <Section style={{ backgroundColor: \"white\" }}>\n                  <p>\n                    <strong>{element.name}</strong>\n                    <small>{element.drawing}</small> <small>{element.mold}</small>\n                    <br />\n                  </p>\n                  <Button\n                    type=\"submit\"\n                    color=\"info\"\n                    onClick={() => {\n                      addBottle(element);\n                    }}\n                  >\n                    Add Bottle\n                  </Button>\n                </Section>\n              </Modal.Content>\n            ))}\n          </div>\n        </OpenModal>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <OpenModal modal={{ closeOnBlur: false }} name=\"Bottle\">\n        <div className=\"modal-body\">\n          {bottles.map((element) => (\n            <Modal.Content>\n              <Section style={{ backgroundColor: \"white\" }}>\n                <p>\n                  <strong>{element.name}</strong>\n                  <small>{element.drawing}</small> <small>{element.mold}</small>\n                  <br />\n                </p>\n                <Button\n                  type=\"submit\"\n                  color=\"info\"\n                  onClick={() => {\n                    addBottle(element);\n                  }}\n                >\n                  Add Bottle\n                </Button>\n              </Section>\n            </Modal.Content>\n          ))}\n        </div>\n      </OpenModal>\n    </div>\n  );\n};\n\n//---------------- Bottle modal\n\n//---------------- Brush modal\n\nexport const BrushModal = () => {\n  const [brushes, setBrushes] = useState([]);\n  const rod = props.rod;\n  const bottle = props.bottle;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const {data} = await axios.get(\"/rod\")\n      .catch(function (error) {\n        console.log(error)\n      });\n      setBottles(data);\n    }\n    fetchData();\n  }, []);\n\n  const addBrush = async (data) => {\n    await axios.post(\"/brush\", {\n        brush: data.brush,\n        original: data.original,\n        shaftLength: data.shaftLength,\n        shaftDiameter: data.shaftDiameter,\n        brushLength: data.brushLength,\n        brushDiameter: data.brushDiameter,\n        type: data.type\n      })\n      .then(function (response) {\n        if (response.status === 200) {\n          alert(\"Brush added to the list!\");\n          console.log(\"Succesfully added\");\n        } else {\n          const err = new Error(response.error);\n          console.log(err);\n          throw err;\n        }\n      })\n      .catch(function (error) {\n        alert(error);\n      });\n  };\n\n  const { isLoading, error, data } = useQuery(\"brushes\", getBrushes);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return (\n    <div>\n      <OpenModal modal={{ closeOnBlur: false }} name=\"Brush\">\n        <div className=\"modal-body\">\n          {data.map((element) => (\n            <Modal.Content>\n            <Section style={{ backgroundColor: \"white\" }}>\n              <p>\n                <strong>{element.brush}</strong>\n                <small>{element.drawing}</small> <small>{element.type}</small>\n                <br />\n              </p>\n              <Button\n                type=\"submit\"\n                color=\"info\"\n                onClick={() => {\n                  addBrush(element);\n                }}\n              >\n                Add Brush\n              </Button>\n            </Section>\n            </Modal.Content>\n          ))}\n        </div>\n      </OpenModal>\n    </div>\n  );\n};\n\n\n//---------------- Brush modal\n\n//---------------- Rod modal\n\n\nexport const RodModal = (props) => {\n  const [rods, setRods] = useState([]);\n  const bottle = props.bottle;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const {data} = await axios.get(\"/rod\")\n      .catch(function (error) {\n        console.log(error)\n      });\n      setRods(data);\n    }\n    fetchData();\n  }, []);\n\n  const addRod = async (data) => {\n    await axios.post(\"/rod\", {\n        name: data.name,\n        drawing: data.drawing,\n        thread: data.thread,\n        dimensions: {\n          length: data.dimensions.length,\n          rodDiameter: data.dimensions.rodDiameter,\n          brushDiameter: data.dimensions.brushDiameter,\n        }\n      })\n      .then(function (response) {\n        if (response.status === 200) {\n          alert(\"Rod added to the list!\");\n          console.log(\"Succesfully added\");\n        } else {\n          const err = new Error(response.error);\n          console.log(err);\n          throw err;\n        }\n      })\n      .catch(function (error) {\n        alert(error);\n      });\n  };\n\n  if (bottle && bottle.thread){\n    const filteredRods = rods.filter( element => {\n      if (element.thread) {\n        return element.thread.toLowerCase().indexOf(bottle.thread.toLowerCase()) !== -1;\n      } else {\n        return element;\n      }\n    });\n\n    return (\n      <div>\n      <OpenModal modal={{ closeOnBlur: false }} name=\"Rod\">\n        <div className=\"modal-body\">\n          {filteredRods.map((element) => (\n            <Modal.Content>\n            <Section style={{ backgroundColor: \"white\" }}>\n              <p>\n                <strong>{element.name}</strong>\n                <small>{element.thread}</small> <small>{element.drawing}</small>\n                <br />\n              </p>\n              <Button\n                type=\"submit\"\n                color=\"info\"\n                onClick={() => {\n                  addRod(element);\n                }}\n              >\n                Add Rod\n              </Button>\n            </Section>\n            </Modal.Content>\n          ))}\n        </div>\n      </OpenModal>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n    <OpenModal modal={{ closeOnBlur: false }} name=\"Rod\">\n      <div className=\"modal-body\">\n        {rods.map((element) => (\n          <Modal.Content>\n          <Section style={{ backgroundColor: \"white\" }}>\n            <p>\n              <strong>{element.name}</strong>\n              <small>{element.thread}</small> <small>{element.drawing}</small>\n              <br />\n            </p>\n            <Button\n              type=\"submit\"\n              color=\"info\"\n              onClick={() => {\n                addRod(element);\n              }}\n            >\n              Add Rod\n            </Button>\n          </Section>\n          </Modal.Content>\n        ))}\n      </div>\n    </OpenModal>\n    </div>\n  );\n};\n\n//---------------- Rod modal\n\n//---------------- Wiper modal\n\nexport const WiperModal = () => {\n  const { isLoading, error, data } = useQuery(\"wipers\", getWipers);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n      {data.map((element) => (\n        <OpenModal modal={{ closeOnBlur: true }} name=\"Wiper\">\n          <Modal.Content>\n            <Section style={{ backgroundColor: \"white\" }}>\n              <p>\n                <strong>{element.name}</strong> <small>{element.drawing}</small>{\" \"}\n                <small>{element.mold}</small>\n                <br />\n                Something else\n              </p>\n            </Section>\n          </Modal.Content>\n        </OpenModal>\n      ))}\n    </div>\n  );\n};\n\n//---------------- Wiper modal\n\n//---------------- Cap modal\n\nexport const CapModal = () => {\n  const { isLoading, error, data } = useQuery(\"caps\", getCaps);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n      {data.map((element) => (\n        <OpenModal modal={{ closeOnBlur: true }} name=\"Wiper\">\n          <Modal.Content>\n            <Section style={{ backgroundColor: \"white\" }}>\n              <p>\n                <strong>{element.name}</strong> <small>{element.drawing}</small>{\" \"}\n                <small>{element.mold}</small>\n                <br />\n                Something else\n              </p>\n            </Section>\n          </Modal.Content>\n        </OpenModal>\n      ))}\n    </div>\n  );\n};\n\n//---------------- Cap modal\n"]},"metadata":{},"sourceType":"module"}