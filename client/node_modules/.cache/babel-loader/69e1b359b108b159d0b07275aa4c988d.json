{"ast":null,"code":"var _jsxFileName = \"/home/leon/Documentos/proyectos/react/mascaras/client/src/components/OpenModal.component.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bulma-components/lib/components/modal';\nimport Button from 'react-bulma-components/lib/components/button';\nimport Content from 'react-bulma-components/lib/components/content';\nimport Section from 'react-bulma-components/lib/components/section';\nimport { select, boolean } from '@storybook/addon-knobs';\nimport { getBrushes, getBottles, getRods, getWipers, getCaps } from \"../middlewares/services\";\nimport { useQuery } from \"react-query\";\nimport { colors } from \"../features/colors.js\";\nimport '../App.css';\nexport class OpenModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      show: false\n    };\n\n    this.open = () => this.setState({\n      show: true\n    });\n\n    this.close = () => this.setState({\n      show: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"info\",\n      onClick: this.open,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \" \", this.props.name, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Modal, Object.assign({\n      show: this.state.show,\n      onClose: this.close\n    }, this.props.modal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }), this.props.children));\n  }\n\n}\nOpenModal.propTypes = {\n  modal: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  name: PropTypes.string\n};\nOpenModal.defaultProps = {\n  modal: {},\n  name: \"name\"\n};\nexport const BottleModal = () => {\n  const [showResults, setShowResults] = useState(true);\n  const [bottleName, setBottleName] = useState('');\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"bottles\", getBottles);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  const onSubmit = (event, element) => {\n    event.preventDefault();\n    fetch(\"/bottle\", {\n      method: \"POST\",\n      body: JSON.stringify(bottleName),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        this.props.history.push(\"/bottles\");\n        alert(\"Bottle added to the list!\");\n        console.log(\"Succesfully added\");\n      } else {\n        const err = new Error(res.error);\n        console.log(err);\n        throw err;\n      }\n    }).catch(err => {\n      console.error(err);\n      alert(\"Error saving bottle. Please, try again!\");\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Bottle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 48\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 81\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }), \"Something else\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"info\",\n    onClick: () => this.setState({\n      bottleName: element.name\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"Add\"))))))));\n};\nexport const BrushModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"brushes\", getBrushes);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Brush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 50\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 83\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }), \"Something else\")))))));\n};\nexport const RodModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"rods\", getRods);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Rod\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 50\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 83\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }), \"Something else\")))))));\n};\nexport const WiperModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"wipers\", getWipers);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Wiper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 48\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 81\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }), \"Something else\"))))));\n};\nexport const CapModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"caps\", getCaps);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(OpenModal, {\n    modal: {\n      closeOnBlur: true\n    },\n    name: \"Wiper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 15\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 48\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 81\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }), \"Something else\"))))));\n};","map":{"version":3,"sources":["/home/leon/Documentos/proyectos/react/mascaras/client/src/components/OpenModal.component.js"],"names":["React","useState","PropTypes","Modal","Button","Content","Section","select","boolean","getBrushes","getBottles","getRods","getWipers","getCaps","useQuery","colors","OpenModal","Component","state","show","open","setState","close","render","props","name","modal","children","propTypes","object","node","isRequired","string","defaultProps","BottleModal","showResults","setShowResults","bottleName","setBottleName","isLoading","error","data","message","onSubmit","event","element","preventDefault","fetch","method","body","JSON","stringify","headers","then","res","status","history","push","alert","console","log","err","Error","catch","closeOnBlur","map","backgroundColor","drawing","mold","BrushModal","RodModal","WiperModal","CapModal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bulma-components/lib/components/modal';\nimport Button from 'react-bulma-components/lib/components/button';\nimport Content from 'react-bulma-components/lib/components/content';\nimport Section from 'react-bulma-components/lib/components/section';\nimport { select, boolean } from '@storybook/addon-knobs';\nimport { getBrushes, getBottles, getRods, getWipers, getCaps } from \"../middlewares/services\";\nimport { useQuery } from \"react-query\";\nimport { colors } from \"../features/colors.js\"\nimport '../App.css';\n\nexport class OpenModal extends React.Component {\n  static propTypes = {\n    modal: PropTypes.object,\n    children: PropTypes.node.isRequired,\n    name: PropTypes.string\n  }\n\n  static defaultProps = {\n    modal: {},\n    name: \"name\"\n  }\n\n  state = {\n    show: false,\n  }\n\n  open = () => this.setState({ show: true });\n  close = () => this.setState({ show: false });\n\n  render() {\n    return (\n      <div>\n        <Button color=\"info\" onClick={this.open}> {this.props.name} </Button>\n        <br/>\n        <Modal show={this.state.show} onClose={this.close} {...this.props.modal}>\n          {this.props.children}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport const BottleModal = () => {\n  const [showResults, setShowResults] = useState(true);\n  const [bottleName, setBottleName] = useState('');\n  const { isLoading, error, data } = useQuery(\"bottles\", getBottles);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  const onSubmit = ( event, element ) => {\n  event.preventDefault();\n  fetch( \"/bottle\", {\n    method: \"POST\",\n    body: JSON.stringify( bottleName ),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n  .then( res => {\n    if ( res.status === 200 ){\n      this.props.history.push( \"/bottles\" );\n      alert( \"Bottle added to the list!\" );\n      console.log( \"Succesfully added\" );\n    } else {\n      const err = new Error( res.error );\n      console.log( err );\n      throw err;\n    }\n  })\n  .catch( err => {\n    console.error( err );\n    alert( \"Error saving bottle. Please, try again!\" )\n  })\n}\n\n  return (\n  <div>\n    <OpenModal modal={{ closeOnBlur: true }} name=\"Bottle\">\n      <div className=\"modal-body\">\n        { data.map( element =>\n          <form onSubmit = { onSubmit } >\n          <Modal.Content>\n            <Section style={{ backgroundColor: 'white' }}>\n            <p>\n              <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n              <br />\n              Something else\n            </p>\n              <Button type=\"submit\" color=\"info\" onClick = {() =>\n                    this.setState({\n                      bottleName: element.name\n                    })}>\n                Add\n              </Button>\n            </Section>\n          </Modal.Content>\n          </form>\n        )}\n      </div>\n    </OpenModal>\n  </div>\n  );\n}\n\nexport const BrushModal = () => {\n  const { isLoading, error, data } = useQuery(\"brushes\", getBrushes);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div>\n      <OpenModal modal={{ closeOnBlur: true }} name=\"Brush\">\n        <div className=\"modal-body\">\n          { data.map( element =>\n            <Modal.Content>\n              <Section style={{ backgroundColor: 'white' }}>\n              <p>\n                <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n                <br />\n                Something else\n              </p>\n              </Section>\n            </Modal.Content>\n          )}\n        </div>\n      </OpenModal>\n    </div>\n  );\n}\n\nexport const RodModal = () => {\n  const { isLoading, error, data } = useQuery(\"rods\", getRods);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div>\n      <OpenModal modal={{ closeOnBlur: true }} name=\"Rod\">\n        <div className=\"modal-body\">\n          { data.map( element =>\n            <Modal.Content>\n              <Section style={{ backgroundColor: 'white' }}>\n              <p>\n                <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n                <br />\n                Something else\n              </p>\n              </Section>\n            </Modal.Content>\n          )}\n        </div>\n      </OpenModal>\n    </div>\n  );\n}\n\nexport const WiperModal = () => {\n  const { isLoading, error, data } = useQuery(\"wipers\", getWipers);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <OpenModal modal={{ closeOnBlur: true }} name=\"Wiper\">\n          <Modal.Content>\n            <Section style={{ backgroundColor: 'white' }}>\n            <p>\n              <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n              <br />\n              Something else\n            </p>\n            </Section>\n          </Modal.Content>\n        </OpenModal>\n      )}\n\n    </div>\n  );\n}\n\nexport const CapModal = () => {\n  const { isLoading, error, data } = useQuery(\"caps\", getCaps);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <OpenModal modal={{ closeOnBlur: true }} name=\"Wiper\">\n          <Modal.Content>\n            <Section style={{ backgroundColor: 'white' }}>\n            <p>\n              <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n              <br />\n              Something else\n            </p>\n            </Section>\n          </Modal.Content>\n        </OpenModal>\n      )}\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}