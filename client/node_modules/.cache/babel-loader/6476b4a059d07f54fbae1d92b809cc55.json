{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nvar colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nvar Select = function Select(_ref) {\n  var _classnames;\n\n  var className = _ref.className,\n      rounded = _ref.rounded,\n      style = _ref.style,\n      size = _ref.size,\n      color = _ref.color,\n      loading = _ref.loading,\n      hovered = _ref.hovered,\n      focused = _ref.focused,\n      readOnly = _ref.readOnly,\n      disabled = _ref.disabled,\n      value = _ref.value,\n      multiple = _ref.multiple,\n      children = _ref.children,\n      name = _ref.name,\n      domRef = _ref.domRef,\n      props = _objectWithoutProperties(_ref, [\"className\", \"rounded\", \"style\", \"size\", \"color\", \"loading\", \"hovered\", \"focused\", \"readOnly\", \"disabled\", \"value\", \"multiple\", \"children\", \"name\", \"domRef\"]);\n  /**\n   * Return default value for value prop\n   */\n\n\n  function defaultValue() {\n    return multiple ? [] : '';\n  }\n\n  return /*#__PURE__*/React.createElement(Element, {\n    domRef: domRef,\n    className: classnames('select', className, (_classnames = {}, _defineProperty(_classnames, \"is-\".concat(size), size), _defineProperty(_classnames, \"is-\".concat(color), color), _defineProperty(_classnames, 'is-loading', loading), _defineProperty(_classnames, 'is-multiple', multiple), _defineProperty(_classnames, 'is-rounded', rounded), _classnames)),\n    style: style\n  }, /*#__PURE__*/React.createElement(Element, _extends({\n    renderAs: \"select\"\n  }, props, {\n    className: classnames({\n      'is-focused': focused,\n      'is-hovered': hovered\n    }),\n    multiple: multiple,\n    value: value !== undefined ? value : defaultValue(),\n    readOnly: readOnly,\n    disabled: disabled,\n    name: name\n  }), children));\n};\n\nSelect.propTypes = _objectSpread(_objectSpread({}, modifiers.propTypes), {}, {\n  /**\n   * Children of this component. Usually they are `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Additional CSS classes to be passed to this component.\n   * They will be applied to the wrapper element around the\n   * actual `<select>` element.\n   */\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n\n  /**\n   * Adjusts the size of this component.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * Adjusts the color of this component.\n   */\n  color: PropTypes.oneOf(colors),\n\n  /**\n   * Whether the dropdown button should have fully rounded corners.\n   */\n  rounded: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  disabled: PropTypes.bool,\n\n  /**\n   * Whether the `<select>` element should accept multiple values.\n   * If true, then the `value` prop can only accept an array.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Whether a loading spinner should be shown in place of the dropdown arrow\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Whether this component is hovered.\n   */\n  hovered: PropTypes.bool,\n\n  /**\n   * Whether this component is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * The value that is held by the `<select>` element.\n   * Must be an array if `multiple` prop is true.\n   *\n   * If this prop is undefined, an empty string will be the default value\n   * of `<select>`, or an empty array if `multiple` is true.\n   */\n  value: function value(props, propName, componentName) {\n    if (props.multiple) {\n      PropTypes.checkPropTypes(_defineProperty({}, propName, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))), props, propName, componentName);\n    } else {\n      PropTypes.checkPropTypes(_defineProperty({}, propName, PropTypes.oneOfType([PropTypes.string, PropTypes.number])), props, propName, componentName);\n    }\n  },\n\n  /**\n   * The name of the input field.\n   * Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string\n});\nSelect.defaultProps = _objectSpread(_objectSpread({}, modifiers.defaultProps), {}, {\n  children: null,\n  className: undefined,\n  value: undefined,\n  style: undefined,\n  size: undefined,\n  color: undefined,\n  readOnly: false,\n  disabled: false,\n  multiple: false,\n  loading: false,\n  hovered: false,\n  focused: false,\n  name: undefined\n});\nexport default Select;","map":{"version":3,"sources":["../../../../src/components/form/components/select.js"],"names":["colors","Object","CONSTANTS","Select","className","rounded","style","size","color","loading","hovered","focused","readOnly","disabled","value","multiple","children","name","domRef","props","classnames","defaultValue","modifiers","PropTypes","string","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\n\nconst colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nconst Select = ({\n  className,\n  rounded,\n  style,\n  size,\n  color,\n  loading,\n  hovered,\n  focused,\n  readOnly,\n  disabled,\n  value,\n  multiple,\n  children,\n  name,\n  domRef,\n  ...props\n}) => {\n  /**\n   * Return default value for value prop\n   */\n  function defaultValue() {\n    return multiple ? [] : '';\n  }\n\n  return (\n    <Element\n      domRef={domRef}\n      className={classnames('select', className, {\n        [`is-${size}`]: size,\n        [`is-${color}`]: color,\n        'is-loading': loading,\n        'is-multiple': multiple,\n        'is-rounded': rounded,\n      })}\n      style={style}\n    >\n      <Element\n        renderAs=\"select\"\n        {...props}\n        className={classnames({\n          'is-focused': focused,\n          'is-hovered': hovered,\n        })}\n        multiple={multiple}\n        value={value !== undefined ? value : defaultValue()}\n        readOnly={readOnly}\n        disabled={disabled}\n        name={name}\n      >\n        {children}\n      </Element>\n    </Element>\n  );\n};\n\nSelect.propTypes = {\n  ...modifiers.propTypes,\n  /**\n   * Children of this component. Usually they are `<option>` elements.\n   */\n  children: PropTypes.node,\n  /**\n   * Additional CSS classes to be passed to this component.\n   * They will be applied to the wrapper element around the\n   * actual `<select>` element.\n   */\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n  /**\n   * Adjusts the size of this component.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * Adjusts the color of this component.\n   */\n  color: PropTypes.oneOf(colors),\n  /**\n   * Whether the dropdown button should have fully rounded corners.\n   */\n  rounded: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  disabled: PropTypes.bool,\n  /**\n   * Whether the `<select>` element should accept multiple values.\n   * If true, then the `value` prop can only accept an array.\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Whether a loading spinner should be shown in place of the dropdown arrow\n   */\n  loading: PropTypes.bool,\n  /**\n   * Whether this component is hovered.\n   */\n  hovered: PropTypes.bool,\n  /**\n   * Whether this component is focused.\n   */\n  focused: PropTypes.bool,\n  /**\n   * The value that is held by the `<select>` element.\n   * Must be an array if `multiple` prop is true.\n   *\n   * If this prop is undefined, an empty string will be the default value\n   * of `<select>`, or an empty array if `multiple` is true.\n   */\n  value: (props, propName, componentName) => {\n    if (props.multiple) {\n      PropTypes.checkPropTypes(\n        {\n          [propName]: PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          ),\n        },\n        props,\n        propName,\n        componentName,\n      );\n    } else {\n      PropTypes.checkPropTypes(\n        {\n          [propName]: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        },\n        props,\n        propName,\n        componentName,\n      );\n    }\n  },\n  /**\n   * The name of the input field.\n   * Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string,\n};\n\nSelect.defaultProps = {\n  ...modifiers.defaultProps,\n  children: null,\n  className: undefined,\n  value: undefined,\n  style: undefined,\n  size: undefined,\n  color: undefined,\n  readOnly: false,\n  disabled: false,\n  multiple: false,\n  loading: false,\n  hovered: false,\n  focused: false,\n  name: undefined,\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}