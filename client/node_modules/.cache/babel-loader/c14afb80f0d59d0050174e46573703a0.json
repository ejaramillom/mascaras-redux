{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nimport renderAsShape from '../../../modifiers/render-as';\nvar colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nvar Textarea = function Textarea(_ref) {\n  var _classnames;\n\n  var className = _ref.className,\n      size = _ref.size,\n      color = _ref.color,\n      focused = _ref.focused,\n      hovered = _ref.hovered,\n      fixedSize = _ref.fixedSize,\n      props = _objectWithoutProperties(_ref, [\"className\", \"size\", \"color\", \"focused\", \"hovered\", \"fixedSize\"]);\n\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    className: classnames('textarea', className, (_classnames = {\n      'is-focused': focused,\n      'is-hovered': hovered,\n      'has-fixed-size': fixedSize\n    }, _defineProperty(_classnames, \"is-\".concat(size), size), _defineProperty(_classnames, \"is-\".concat(color), color), _classnames))\n  }));\n};\n\nTextarea.propTypes = _objectSpread(_objectSpread({}, modifiers.propTypes), {}, {\n  /**\n   * Additional CSS classes to be passed to `<Form.Textarea />`.\n   * They will sit alongside pre-applied Bulma classes.\n   */\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n\n  /**\n   * Adjusts the size of the textarea input\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n\n  /**\n   * Whether this textarea is in a focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * Whether this textarea is in a hovered state.\n   */\n  hovered: PropTypes.bool,\n\n  /**\n   * Whether the size of this textarea should be fixed regardless of its content.\n   */\n  fixedSize: PropTypes.bool,\n\n  /**\n   * Specifies what component `<Form.Textarea />` should be rendered as.\n   */\n  renderAs: renderAsShape\n});\nTextarea.defaultProps = _objectSpread(_objectSpread({}, modifiers.defaultProps), {}, {\n  renderAs: 'textarea',\n  className: undefined,\n  style: undefined,\n  size: undefined,\n  focused: false,\n  hovered: false,\n  fixedSize: false,\n  color: undefined\n});\nexport default Textarea;","map":{"version":3,"sources":["../../../../src/components/form/components/textarea.js"],"names":["colors","Object","CONSTANTS","Textarea","className","size","color","focused","hovered","fixedSize","props","classnames","modifiers","PropTypes","style","renderAs","renderAsShape","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nimport renderAsShape from '../../../modifiers/render-as';\n\nconst colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nconst Textarea = ({\n  className,\n  size,\n  color,\n  focused,\n  hovered,\n  fixedSize,\n  ...props\n}) => (\n  <Element\n    {...props}\n    className={classnames('textarea', className, {\n      'is-focused': focused,\n      'is-hovered': hovered,\n      'has-fixed-size': fixedSize,\n      [`is-${size}`]: size,\n      [`is-${color}`]: color,\n    })}\n  />\n);\n\nTextarea.propTypes = {\n  ...modifiers.propTypes,\n  /**\n   * Additional CSS classes to be passed to `<Form.Textarea />`.\n   * They will sit alongside pre-applied Bulma classes.\n   */\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n  /**\n   * Adjusts the size of the textarea input\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n  /**\n   * Whether this textarea is in a focused state.\n   */\n  focused: PropTypes.bool,\n  /**\n   * Whether this textarea is in a hovered state.\n   */\n  hovered: PropTypes.bool,\n  /**\n   * Whether the size of this textarea should be fixed regardless of its content.\n   */\n  fixedSize: PropTypes.bool,\n  /**\n   * Specifies what component `<Form.Textarea />` should be rendered as.\n   */\n  renderAs: renderAsShape,\n};\n\nTextarea.defaultProps = {\n  ...modifiers.defaultProps,\n  renderAs: 'textarea',\n  className: undefined,\n  style: undefined,\n  size: undefined,\n  focused: false,\n  hovered: false,\n  fixedSize: false,\n  color: undefined,\n};\n\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module"}