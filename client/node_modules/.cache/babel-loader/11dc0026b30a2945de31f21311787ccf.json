{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nvar colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nvar Input = function Input(_ref) {\n  var _classnames;\n\n  var className = _ref.className,\n      size = _ref.size,\n      color = _ref.color,\n      readOnly = _ref.readOnly,\n      isStatic = _ref.isStatic,\n      hovered = _ref.hovered,\n      rounded = _ref.rounded,\n      focused = _ref.focused,\n      props = _objectWithoutProperties(_ref, [\"className\", \"size\", \"color\", \"readOnly\", \"isStatic\", \"hovered\", \"rounded\", \"focused\"]);\n\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    readOnly: readOnly || isStatic,\n    className: classnames('input', className, (_classnames = {\n      'is-static': isStatic,\n      'is-hovered': hovered,\n      'is-focused': focused,\n      'is-rounded': rounded\n    }, _defineProperty(_classnames, \"is-\".concat(size), size), _defineProperty(_classnames, \"is-\".concat(color), color), _classnames))\n  }));\n};\n\nInput.propTypes = _objectSpread(_objectSpread({}, modifiers.propTypes), {}, {\n  /**\n   * Adjusts the size of this input.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n\n  /**\n   * Whether this input should be read-only.\n   * Equivalent to the readonly attribute of the `<input>` element.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Whether this input should be static.\n   * If true, this input will be readonly, and all the input decorations\n   * are removed.\n   */\n  isStatic: PropTypes.bool,\n\n  /**\n   * Whether this input is in a focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * Whether this input is in a hovered state.\n   */\n  hovered: PropTypes.bool,\n\n  /**\n   * Whether this input is rounded. The input will have a 50% border-radius,\n   * making the left and right side fully rounded.\n   */\n  rounded: PropTypes.bool,\n\n  /**\n   * Additional CSS classes to be passed to `<Form.Input />`.\n   * They will sit alongside pre-applied Bulma classes.\n   */\n  className: PropTypes.string\n});\nInput.defaultProps = _objectSpread(_objectSpread({}, modifiers.defaultProps), {}, {\n  className: undefined,\n  size: undefined,\n  color: undefined,\n  readOnly: false,\n  isStatic: false,\n  focused: false,\n  hovered: false,\n  rounded: false,\n  renderAs: 'input'\n});\nexport default Input;","map":{"version":3,"sources":["../../../../src/components/form/components/input.js"],"names":["colors","Object","CONSTANTS","Input","className","size","color","readOnly","isStatic","hovered","rounded","focused","props","classnames","modifiers","PropTypes","string","renderAs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\n\nconst colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nconst Input = ({\n  className,\n  size,\n  color,\n  readOnly,\n  isStatic,\n  hovered,\n  rounded,\n  focused,\n  ...props\n}) => (\n  <Element\n    {...props}\n    readOnly={readOnly || isStatic}\n    className={classnames('input', className, {\n      'is-static': isStatic,\n      'is-hovered': hovered,\n      'is-focused': focused,\n      'is-rounded': rounded,\n      [`is-${size}`]: size,\n      [`is-${color}`]: color,\n    })}\n  />\n);\n\nInput.propTypes = {\n  ...modifiers.propTypes,\n  /**\n   * Adjusts the size of this input.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n  /**\n   * Whether this input should be read-only.\n   * Equivalent to the readonly attribute of the `<input>` element.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether this input should be static.\n   * If true, this input will be readonly, and all the input decorations\n   * are removed.\n   */\n  isStatic: PropTypes.bool,\n  /**\n   * Whether this input is in a focused state.\n   */\n  focused: PropTypes.bool,\n  /**\n   * Whether this input is in a hovered state.\n   */\n  hovered: PropTypes.bool,\n  /**\n   * Whether this input is rounded. The input will have a 50% border-radius,\n   * making the left and right side fully rounded.\n   */\n  rounded: PropTypes.bool,\n  /**\n   * Additional CSS classes to be passed to `<Form.Input />`.\n   * They will sit alongside pre-applied Bulma classes.\n   */\n  className: PropTypes.string,\n};\n\nInput.defaultProps = {\n  ...modifiers.defaultProps,\n  className: undefined,\n  size: undefined,\n  color: undefined,\n  readOnly: false,\n  isStatic: false,\n  focused: false,\n  hovered: false,\n  rounded: false,\n  renderAs: 'input',\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}