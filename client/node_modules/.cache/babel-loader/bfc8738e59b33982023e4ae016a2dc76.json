{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nimport useFieldContext from './field/context';\nvar colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nvar Textarea = function Textarea(_ref) {\n  var _classnames;\n\n  var className = _ref.className,\n      size = _ref.size,\n      color = _ref.color,\n      status = _ref.status,\n      fixedSize = _ref.fixedSize,\n      props = _objectWithoutProperties(_ref, [\"className\", \"size\", \"color\", \"status\", \"fixedSize\"]);\n\n  var context = useFieldContext();\n  var calculatedSize = size || context.size;\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    className: classnames('textarea', className, (_classnames = {}, _defineProperty(_classnames, \"is-\".concat(status, \"ed\"), status), _defineProperty(_classnames, 'has-fixed-size', fixedSize), _defineProperty(_classnames, \"is-\".concat(calculatedSize), calculatedSize), _defineProperty(_classnames, \"is-\".concat(color), color), _classnames))\n  }));\n};\n\nTextarea.propTypes = {\n  /**\n   * Adjusts the size of the textarea input\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n  status: PropTypes.oneOf(['focus', 'hover']),\n\n  /**\n   * Whether the size of this textarea should be fixed regardless of its content.\n   */\n  fixedSize: PropTypes.bool,\n  disabled: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nTextarea.defaultProps = {\n  renderAs: 'textarea'\n};\nexport default Textarea;","map":{"version":3,"sources":["../../../../src/components/form/components/textarea.js"],"names":["colors","Object","CONSTANTS","Textarea","className","size","color","status","fixedSize","props","context","useFieldContext","calculatedSize","classnames","PropTypes","disabled","renderAs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,OAAA,MAAA,eAAA;AACA,OAAA,eAAA,MAAA,iBAAA;AAEA,IAAMA,MAAM,GAAG,CAAA,IAAA,EAAA,MAAA,CAAcC,MAAM,CAANA,MAAAA,CAAcC,SAAS,CAApD,MAA6BD,CAAd,CAAf;;AAEA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAA,IAAA,EAA6D;AAAA,MAAA,WAAA;;AAAA,MAA1DC,SAA0D,GAAA,IAAA,CAA1DA,SAA0D;AAAA,MAA/CC,IAA+C,GAAA,IAAA,CAA/CA,IAA+C;AAAA,MAAzCC,KAAyC,GAAA,IAAA,CAAzCA,KAAyC;AAAA,MAAlCC,MAAkC,GAAA,IAAA,CAAlCA,MAAkC;AAAA,MAA1BC,SAA0B,GAAA,IAAA,CAA1BA,SAA0B;AAAA,MAAZC,KAAY,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,CAAA,CAAA;;AAC5E,MAAMC,OAAO,GAAGC,eAAhB,EAAA;AACA,MAAMC,cAAc,GAAGP,IAAI,IAAIK,OAAO,CAAtC,IAAA;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,SAAS,EAAEG,UAAU,CAAA,UAAA,EAAA,SAAA,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,MAAA,MAAA,CAAA,MAAA,EAAA,IAAA,CAAA,EAAA,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,gBAAA,EAAA,SAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,MAAA,MAAA,CAAA,cAAA,CAAA,EAAA,cAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,MAAA,MAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,WAAA;AAFvB,GAAA,CAAA,CADF;AAHF,CAAA;;AAgBAV,QAAQ,CAARA,SAAAA,GAAqB;AACnB;;;AAGAE,EAAAA,IAAI,EAAES,SAAS,CAATA,KAAAA,CAAgB,CAAA,OAAA,EAAA,QAAA,EAJH,OAIG,CAAhBA,CAJa;;AAKnB;;;AAGAR,EAAAA,KAAK,EAAEQ,SAAS,CAATA,KAAAA,CARY,MAQZA,CARY;AASnBP,EAAAA,MAAM,EAAEO,SAAS,CAATA,KAAAA,CAAgB,CAAA,OAAA,EATL,OASK,CAAhBA,CATW;;AAUnB;;;AAGAN,EAAAA,SAAS,EAAEM,SAAS,CAbD,IAAA;AAcnBC,EAAAA,QAAQ,EAAED,SAAS,CAdA,IAAA;AAenBE,EAAAA,QAAQ,EAAEF,SAAS,CAATA,SAAAA,CAAoB,CAC5BA,SAAS,CADmB,IAAA,EAE5BA,SAAS,CAFmB,MAAA,EAG5BA,SAAS,CAHDA,MAAoB,CAApBA;AAfS,CAArBX;AAsBAA,QAAQ,CAARA,YAAAA,GAAwB;AACtBa,EAAAA,QAAQ,EAAE;AADY,CAAxBb;AAIA,eAAA,QAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CONSTANTS from '../../../constants';\nimport Element from '../../element';\nimport useFieldContext from './field/context';\n\nconst colors = [null].concat(Object.values(CONSTANTS.COLORS));\n\nconst Textarea = ({ className, size, color, status, fixedSize, ...props }) => {\n  const context = useFieldContext();\n  const calculatedSize = size || context.size;\n  return (\n    <Element\n      {...props}\n      className={classnames('textarea', className, {\n        [`is-${status}ed`]: status,\n        'has-fixed-size': fixedSize,\n        [`is-${calculatedSize}`]: calculatedSize,\n        [`is-${color}`]: color,\n      })}\n    />\n  );\n};\n\nTextarea.propTypes = {\n  /**\n   * Adjusts the size of the textarea input\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOf(colors),\n  status: PropTypes.oneOf(['focus', 'hover']),\n  /**\n   * Whether the size of this textarea should be fixed regardless of its content.\n   */\n  fixedSize: PropTypes.bool,\n  disabled: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nTextarea.defaultProps = {\n  renderAs: 'textarea',\n};\n\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module"}