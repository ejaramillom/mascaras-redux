{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n/**\n * Bulma viewports\n * @type {string[]}\n */\n\nvar VIEWPORTS = ['mobile', 'tablet', 'desktop', 'widescreen', 'fullhd', 'touch'];\n/**\n * Display modifier values\n * @type {string[]}\n */\n\nvar DISPLAYS = ['block', 'flex', 'inline', 'inline-block', 'inline-flex'];\n/**\n * Text size modifier values\n * @type {number[]}\n */\n\nvar TEXT_SIZES = [1, 2, 3, 4, 5, 6];\nvar TEXT_ALIGNMENTS = ['centered', 'justified', 'left', 'right'];\nvar responsiveModifierPropTypes = VIEWPORTS.reduce(function (allViewports, currentViewport) {\n  var modifierProps = PropTypes.shape({\n    display: PropTypes.oneOf(DISPLAYS),\n    hide: PropTypes.bool,\n    textSize: PropTypes.oneOf(TEXT_SIZES),\n    textAlignment: PropTypes.oneOf(TEXT_ALIGNMENTS)\n  });\n  var viewportSpecificPropName = \"\".concat(currentViewport, \"Only\");\n  allViewports.propTypes[currentViewport] = modifierProps;\n  allViewports.defaultProps[currentViewport] = undefined;\n  allViewports.propTypes[viewportSpecificPropName] = modifierProps;\n  allViewports.defaultProps[viewportSpecificPropName] = undefined;\n  return allViewports;\n}, {\n  propTypes: {\n    display: PropTypes.oneOf(DISPLAYS)\n  },\n  defaultProps: {\n    display: undefined\n  }\n});\n/**\n * Return Bulma modifier classes from given component props\n * @param props\n */\n\nvar classNamesFromProps = function classNamesFromProps(props) {\n  return Object.keys(props).reduce(function (classNamesObject, propName) {\n    var maybeViewportName = propName.replace('Only', ''); // each viewport has two props:\n    // mobile, mobileOnly; desktop, desktopOnly, etc.\n    // this checks if propName is a responsive modifier prop\n\n    if (VIEWPORTS.includes(maybeViewportName) && props[propName]) {\n      var currentViewport = maybeViewportName;\n      var _props$propName = props[propName],\n          _props$propName$displ = _props$propName.display,\n          display = _props$propName$displ === void 0 ? '' : _props$propName$displ,\n          _props$propName$hide = _props$propName.hide,\n          hide = _props$propName$hide === void 0 ? false : _props$propName$hide,\n          _props$propName$textS = _props$propName.textSize,\n          textSize = _props$propName$textS === void 0 ? 0 : _props$propName$textS,\n          _props$propName$textA = _props$propName.textAlignment,\n          textAlignment = _props$propName$textA === void 0 ? '' : _props$propName$textA;\n\n      if (propName.includes('Only')) {\n        // current modifiers are viewport specific\n        classNamesObject[\"is-\".concat(display, \"-\").concat(currentViewport, \"-only\")] = display;\n        classNamesObject[\"is-hidden-\".concat(currentViewport, \"-only\")] = hide;\n        classNamesObject[\"has-text-\".concat(textAlignment, \"-\").concat(currentViewport, \"-only\")] = textAlignment;\n        classNamesObject[\"is-size-\".concat(textSize, \"-only\")] = textSize;\n      } else {\n        classNamesObject[\"is-\".concat(display, \"-\").concat(currentViewport)] = display;\n        classNamesObject[\"is-hidden-\".concat(currentViewport)] = hide;\n        classNamesObject[\"has-text-\".concat(textAlignment, \"-\").concat(currentViewport)] = textAlignment;\n        classNamesObject[\"is-size-\".concat(textSize)] = textSize;\n      }\n    }\n\n    return classNamesObject;\n  }, _defineProperty({}, \"is-\".concat(props.display), props.display));\n};\n\nexport default _objectSpread(_objectSpread({}, responsiveModifierPropTypes), {}, {\n  classnames: function classnames(props) {\n    return classNames(classNamesFromProps(props));\n  },\n  clean: function clean(props) {\n    return Object.keys(props).reduce(function (cleanedProps, propName) {\n      if (!VIEWPORTS.includes(propName.replace('Only', ''))) {\n        cleanedProps[propName] = props[propName];\n      }\n\n      return cleanedProps;\n    }, {});\n  }\n});","map":{"version":3,"sources":["../../src/modifiers/responsives.js"],"names":["VIEWPORTS","DISPLAYS","TEXT_SIZES","TEXT_ALIGNMENTS","responsiveModifierPropTypes","modifierProps","display","PropTypes","hide","textSize","textAlignment","viewportSpecificPropName","allViewports","propTypes","defaultProps","undefined","classNamesFromProps","maybeViewportName","propName","props","currentViewport","classNamesObject","classnames","classNames","clean","cleanedProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n/**\n * Bulma viewports\n * @type {string[]}\n */\nconst VIEWPORTS = [\n  'mobile',\n  'tablet',\n  'desktop',\n  'widescreen',\n  'fullhd',\n  'touch',\n];\n\n/**\n * Display modifier values\n * @type {string[]}\n */\nconst DISPLAYS = ['block', 'flex', 'inline', 'inline-block', 'inline-flex'];\n\n/**\n * Text size modifier values\n * @type {number[]}\n */\nconst TEXT_SIZES = [1, 2, 3, 4, 5, 6];\n\nconst TEXT_ALIGNMENTS = ['centered', 'justified', 'left', 'right'];\n\nconst responsiveModifierPropTypes = VIEWPORTS.reduce(\n  (allViewports, currentViewport) => {\n    const modifierProps = PropTypes.shape({\n      display: PropTypes.oneOf(DISPLAYS),\n      hide: PropTypes.bool,\n      textSize: PropTypes.oneOf(TEXT_SIZES),\n      textAlignment: PropTypes.oneOf(TEXT_ALIGNMENTS),\n    });\n    const viewportSpecificPropName = `${currentViewport}Only`;\n\n    allViewports.propTypes[currentViewport] = modifierProps;\n    allViewports.defaultProps[currentViewport] = undefined;\n    allViewports.propTypes[viewportSpecificPropName] = modifierProps;\n    allViewports.defaultProps[viewportSpecificPropName] = undefined;\n\n    return allViewports;\n  },\n  {\n    propTypes: {\n      display: PropTypes.oneOf(DISPLAYS),\n    },\n    defaultProps: {\n      display: undefined,\n    },\n  },\n);\n\n/**\n * Return Bulma modifier classes from given component props\n * @param props\n */\nconst classNamesFromProps = (props) =>\n  Object.keys(props).reduce(\n    (classNamesObject, propName) => {\n      const maybeViewportName = propName.replace('Only', '');\n\n      // each viewport has two props:\n      // mobile, mobileOnly; desktop, desktopOnly, etc.\n      // this checks if propName is a responsive modifier prop\n      if (VIEWPORTS.includes(maybeViewportName) && props[propName]) {\n        const currentViewport = maybeViewportName;\n        const {\n          display = '',\n          hide = false,\n          textSize = 0,\n          textAlignment = '',\n        } = props[propName];\n\n        if (propName.includes('Only')) {\n          // current modifiers are viewport specific\n          classNamesObject[`is-${display}-${currentViewport}-only`] = display;\n          classNamesObject[`is-hidden-${currentViewport}-only`] = hide;\n          classNamesObject[\n            `has-text-${textAlignment}-${currentViewport}-only`\n          ] = textAlignment;\n          classNamesObject[`is-size-${textSize}-only`] = textSize;\n        } else {\n          classNamesObject[`is-${display}-${currentViewport}`] = display;\n          classNamesObject[`is-hidden-${currentViewport}`] = hide;\n          classNamesObject[\n            `has-text-${textAlignment}-${currentViewport}`\n          ] = textAlignment;\n          classNamesObject[`is-size-${textSize}`] = textSize;\n        }\n      }\n\n      return classNamesObject;\n    },\n    {\n      [`is-${props.display}`]: props.display,\n    },\n  );\n\nexport default {\n  ...responsiveModifierPropTypes,\n  classnames: (props) => classNames(classNamesFromProps(props)),\n  clean: (props) =>\n    Object.keys(props).reduce((cleanedProps, propName) => {\n      if (!VIEWPORTS.includes(propName.replace('Only', ''))) {\n        cleanedProps[propName] = props[propName];\n      }\n      return cleanedProps;\n    }, {}),\n};\n"]},"metadata":{},"sourceType":"module"}