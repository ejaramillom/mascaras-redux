{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport Element from '../../element';\n\nvar Radio = function Radio(_ref) {\n  var className = _ref.className,\n      style = _ref.style,\n      disabled = _ref.disabled,\n      checked = _ref.checked,\n      value = _ref.value,\n      name = _ref.name,\n      children = _ref.children,\n      domRef = _ref.domRef,\n      props = _objectWithoutProperties(_ref, [\"className\", \"style\", \"disabled\", \"checked\", \"value\", \"name\", \"children\", \"domRef\"]);\n\n  return /*#__PURE__*/React.createElement(Element, {\n    renderAs: \"label\",\n    domRef: domRef,\n    disabled: disabled,\n    className: classnames('radio', className),\n    style: style\n  }, /*#__PURE__*/React.createElement(Element, _extends({\n    renderAs: \"input\"\n  }, props, {\n    name: name,\n    checked: checked,\n    type: \"radio\",\n    value: value,\n    disabled: disabled\n  })), children);\n};\n\nRadio.propTypes = _objectSpread(_objectSpread({}, modifiers.propTypes), {}, {\n  children: PropTypes.node,\n\n  /**\n   * Additional CSS classes to be passed to `Form.Radio`.\n   * They will sit alongside pre-applied Bulma classes.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The name of the input field.\n   * Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string,\n\n  /**\n   * React style object for `Form.Radio`\n   */\n  style: PropTypes.shape({}),\n\n  /**\n   * Whether this radio button is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Whether this radio button is checked,\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The associated value of this radio button.\n   * You can retrieve this value in the onChange handler of this component.\n   */\n  value: PropTypes.string\n});\nRadio.defaultProps = _objectSpread(_objectSpread({}, modifiers.defaultProps), {}, {\n  children: null,\n  className: undefined,\n  name: undefined,\n  value: '',\n  style: undefined,\n  disabled: false,\n  checked: false\n});\nexport default Radio;","map":{"version":3,"sources":["../../../../src/components/form/components/radio.js"],"names":["Radio","className","style","disabled","checked","value","name","children","domRef","props","classnames","modifiers","PropTypes","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,OAAA,MAAA,eAAA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAAA;AAAA,MACZC,SADY,GAAA,IAAA,CAAA,SAAA;AAAA,MAEZC,KAFY,GAAA,IAAA,CAAA,KAAA;AAAA,MAGZC,QAHY,GAAA,IAAA,CAAA,QAAA;AAAA,MAIZC,OAJY,GAAA,IAAA,CAAA,OAAA;AAAA,MAKZC,KALY,GAAA,IAAA,CAAA,KAAA;AAAA,MAMZC,IANY,GAAA,IAAA,CAAA,IAAA;AAAA,MAOZC,QAPY,GAAA,IAAA,CAAA,QAAA;AAAA,MAQZC,MARY,GAAA,IAAA,CAAA,MAAA;AAAA,MASTC,KATS,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,CAAA,CAAA;;AAAA,SAAA,aAWZ,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,IAAA,QAAQ,EADV,OAAA;AAEE,IAAA,MAAM,EAFR,MAAA;AAGE,IAAA,QAAQ,EAHV,QAAA;AAIE,IAAA,SAAS,EAAEC,UAAU,CAAA,OAAA,EAJvB,SAIuB,CAJvB;AAKE,IAAA,KAAK,EAAER;AALT,GAAA,EAAA,aAOE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AACE,IAAA,QAAQ,EAAC;AADX,GAAA,EAAA,KAAA,EAAA;AAGE,IAAA,IAAI,EAHN,IAAA;AAIE,IAAA,OAAO,EAJT,OAAA;AAKE,IAAA,IAAI,EALN,OAAA;AAME,IAAA,KAAK,EANP,KAAA;AAOE,IAAA,QAAQ,EAAEC;AAPZ,GAAA,CAAA,CAPF,EAXY,QAWZ,CAXY;AAAd,CAAA;;AA+BAH,KAAK,CAALA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKW,SAAS,CADdX,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEO,EAAAA,QAAQ,EAAEK,SAAS,CAFrBZ,IAAAA;;AAGE;;;;AAIAC,EAAAA,SAAS,EAAEW,SAAS,CAPtBZ,MAAAA;;AAQE;;;;AAIAM,EAAAA,IAAI,EAAEM,SAAS,CAZjBZ,MAAAA;;AAaE;;;AAGAE,EAAAA,KAAK,EAAEU,SAAS,CAATA,KAAAA,CAhBTZ,EAgBSY,CAhBTZ;;AAiBE;;;AAGAG,EAAAA,QAAQ,EAAES,SAAS,CApBrBZ,IAAAA;;AAqBE;;;AAGAI,EAAAA,OAAO,EAAEQ,SAAS,CAxBpBZ,IAAAA;;AAyBE;;;;AAIAK,EAAAA,KAAK,EAAEO,SAAS,CAACC;AA7BnBb,CAAAA,CAAAA;AAgCAA,KAAK,CAALA,YAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKW,SAAS,CADdX,YAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAEEO,EAAAA,QAAQ,EAFVP,IAAAA;AAGEC,EAAAA,SAAS,EAHXD,SAAAA;AAIEM,EAAAA,IAAI,EAJNN,SAAAA;AAKEK,EAAAA,KAAK,EALPL,EAAAA;AAMEE,EAAAA,KAAK,EANPF,SAAAA;AAOEG,EAAAA,QAAQ,EAPVH,KAAAA;AAQEI,EAAAA,OAAO,EAAE;AARXJ,CAAAA,CAAAA;AAWA,eAAA,KAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport modifiers from '../../../modifiers';\nimport Element from '../../element';\n\nconst Radio = ({\n  className,\n  style,\n  disabled,\n  checked,\n  value,\n  name,\n  children,\n  domRef,\n  ...props\n}) => (\n  <Element\n    renderAs=\"label\"\n    domRef={domRef}\n    disabled={disabled}\n    className={classnames('radio', className)}\n    style={style}\n  >\n    <Element\n      renderAs=\"input\"\n      {...props}\n      name={name}\n      checked={checked}\n      type=\"radio\"\n      value={value}\n      disabled={disabled}\n    />\n    {children}\n  </Element>\n);\n\nRadio.propTypes = {\n  ...modifiers.propTypes,\n  children: PropTypes.node,\n  /**\n   * Additional CSS classes to be passed to `Form.Radio`.\n   * They will sit alongside pre-applied Bulma classes.\n   */\n  className: PropTypes.string,\n  /**\n   * The name of the input field.\n   * Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)\n   */\n  name: PropTypes.string,\n  /**\n   * React style object for `Form.Radio`\n   */\n  style: PropTypes.shape({}),\n  /**\n   * Whether this radio button is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether this radio button is checked,\n   */\n  checked: PropTypes.bool,\n  /**\n   * The associated value of this radio button.\n   * You can retrieve this value in the onChange handler of this component.\n   */\n  value: PropTypes.string,\n};\n\nRadio.defaultProps = {\n  ...modifiers.defaultProps,\n  children: null,\n  className: undefined,\n  name: undefined,\n  value: '',\n  style: undefined,\n  disabled: false,\n  checked: false,\n};\n\nexport default Radio;\n"]},"metadata":{},"sourceType":"module"}