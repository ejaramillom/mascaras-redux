{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Element from '../../element';\n\nvar NavbarDropdown = function NavbarDropdown(_ref) {\n  var className = _ref.className,\n      boxed = _ref.boxed,\n      right = _ref.right,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"className\", \"boxed\", \"right\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(Element, _extends({}, props, {\n    className: classnames('navbar-dropdown', className, {\n      'is-boxed': boxed,\n      'is-right': right\n    })\n  }), children);\n};\n\nNavbarDropdown.propTypes = {\n  boxed: PropTypes.bool,\n\n  /**\n   * If your parent `Navbar.Container` is on the right side, you can align the dropdown to start from the right setting this to true.\n   */\n  right: PropTypes.bool,\n\n  /**\n   * Open the dropdown upward instead of downward (default behaviour)\n   */\n  up: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nNavbarDropdown.defaultProps = {\n  renderAs: 'span'\n};\nexport default NavbarDropdown;","map":{"version":3,"sources":["../../../../src/components/navbar/components/dropdown.js"],"names":["NavbarDropdown","className","boxed","right","children","props","classnames","PropTypes","up","renderAs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,OAAA,MAAA,eAAA;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAA;AAAA,MAAGC,SAAH,GAAA,IAAA,CAAA,SAAA;AAAA,MAAcC,KAAd,GAAA,IAAA,CAAA,KAAA;AAAA,MAAqBC,KAArB,GAAA,IAAA,CAAA,KAAA;AAAA,MAA4BC,QAA5B,GAAA,IAAA,CAAA,QAAA;AAAA,MAAyCC,KAAzC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAA,UAAA,CAAA,CAAA;;AAAA,SAAA,aACrB,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,SAAS,EAAEC,UAAU,CAAA,iBAAA,EAAA,SAAA,EAA+B;AAClD,kBADkD,KAAA;AAElD,kBAAYH;AAFsC,KAA/B;AAFvB,GAAA,CAAA,EADqB,QACrB,CADqB;AAAvB,CAAA;;AAYAH,cAAc,CAAdA,SAAAA,GAA2B;AACzBE,EAAAA,KAAK,EAAEK,SAAS,CADS,IAAA;;AAEzB;;;AAGAJ,EAAAA,KAAK,EAAEI,SAAS,CALS,IAAA;;AAMzB;;;AAGAC,EAAAA,EAAE,EAAED,SAAS,CATY,IAAA;AAUzBE,EAAAA,QAAQ,EAAEF,SAAS,CAATA,SAAAA,CAAoB,CAC5BA,SAAS,CADmB,IAAA,EAE5BA,SAAS,CAFmB,MAAA,EAG5BA,SAAS,CAHDA,MAAoB,CAApBA;AAVe,CAA3BP;AAiBAA,cAAc,CAAdA,YAAAA,GAA8B;AAC5BS,EAAAA,QAAQ,EAAE;AADkB,CAA9BT;AAIA,eAAA,cAAA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Element from '../../element';\n\nconst NavbarDropdown = ({ className, boxed, right, children, ...props }) => (\n  <Element\n    {...props}\n    className={classnames('navbar-dropdown', className, {\n      'is-boxed': boxed,\n      'is-right': right,\n    })}\n  >\n    {children}\n  </Element>\n);\n\nNavbarDropdown.propTypes = {\n  boxed: PropTypes.bool,\n  /**\n   * If your parent `Navbar.Container` is on the right side, you can align the dropdown to start from the right setting this to true.\n   */\n  right: PropTypes.bool,\n  /**\n   * Open the dropdown upward instead of downward (default behaviour)\n   */\n  up: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nNavbarDropdown.defaultProps = {\n  renderAs: 'span',\n};\n\nexport default NavbarDropdown;\n"]},"metadata":{},"sourceType":"module"}