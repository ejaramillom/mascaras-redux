{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storySort = void 0;\n\nvar storySort = function storySort() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (a, b) {\n    // If the two stories have the same story kind, then use the default\n    // ordering, which is the order they are defined in the story file.\n    if (a[1].kind === b[1].kind) {\n      return 0;\n    } // Get the StorySortParameter options.\n\n\n    var method = options.method || 'configure';\n    var order = options.order || []; // Examine each part of the story kind in turn.\n\n    var storyKindA = a[1].kind.split('/');\n    var storyKindB = b[1].kind.split('/');\n    var depth = 0;\n\n    while (storyKindA[depth] || storyKindB[depth]) {\n      // Stories with a shorter depth should go first.\n      if (!storyKindA[depth]) {\n        return -1;\n      }\n\n      if (!storyKindB[depth]) {\n        return 1;\n      } // Compare the next part of the story kind.\n\n\n      var nameA = storyKindA[depth];\n      var nameB = storyKindB[depth];\n\n      if (nameA !== nameB) {\n        // Look for the names in the given `order` array.\n        var indexA = order.indexOf(nameA);\n        var indexB = order.indexOf(nameB); // If at least one of the names is found, sort by the `order` array.\n\n        if (indexA !== -1 || indexB !== -1) {\n          // If one of the names is not found in `order`, list it last.\n          if (indexA === -1) {\n            indexA = order.length;\n          }\n\n          if (indexB === -1) {\n            indexB = order.length;\n          }\n\n          return indexA - indexB;\n        } // Use the default configure() order.\n\n\n        if (method === 'configure') {\n          return 0;\n        } // Otherwise, use alphabetical order.\n\n\n        return nameA.localeCompare(nameB, options.locales ? options.locales : undefined, {\n          numeric: true,\n          sensitivity: 'accent'\n        });\n      } // If a nested array is provided for a name, use it for ordering.\n\n\n      var index = order.indexOf(nameA);\n      order = index !== -1 && Array.isArray(order[index + 1]) ? order[index + 1] : []; // We'll need to look at the next part of the name.\n\n      depth += 1;\n    } // Identical story kinds. The shortcut at the start of this function prevents\n    // this from ever being used.\n\n    /* istanbul ignore next */\n\n\n    return 0;\n  };\n};\n\nexports.storySort = storySort;","map":{"version":3,"sources":["/home/daniel/Desktop/Estudio/Proyectos/mascaraSimex/mascara/client/node_modules/@storybook/client-api/dist/storySort.js"],"names":["Object","defineProperty","exports","value","storySort","options","arguments","length","undefined","a","b","kind","method","order","storyKindA","split","storyKindB","depth","nameA","nameB","indexA","indexOf","indexB","localeCompare","locales","numeric","sensitivity","index","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.array.index-of\");\n\nrequire(\"core-js/modules/es.array.is-array\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storySort = void 0;\n\nvar storySort = function storySort() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (a, b) {\n    // If the two stories have the same story kind, then use the default\n    // ordering, which is the order they are defined in the story file.\n    if (a[1].kind === b[1].kind) {\n      return 0;\n    } // Get the StorySortParameter options.\n\n\n    var method = options.method || 'configure';\n    var order = options.order || []; // Examine each part of the story kind in turn.\n\n    var storyKindA = a[1].kind.split('/');\n    var storyKindB = b[1].kind.split('/');\n    var depth = 0;\n\n    while (storyKindA[depth] || storyKindB[depth]) {\n      // Stories with a shorter depth should go first.\n      if (!storyKindA[depth]) {\n        return -1;\n      }\n\n      if (!storyKindB[depth]) {\n        return 1;\n      } // Compare the next part of the story kind.\n\n\n      var nameA = storyKindA[depth];\n      var nameB = storyKindB[depth];\n\n      if (nameA !== nameB) {\n        // Look for the names in the given `order` array.\n        var indexA = order.indexOf(nameA);\n        var indexB = order.indexOf(nameB); // If at least one of the names is found, sort by the `order` array.\n\n        if (indexA !== -1 || indexB !== -1) {\n          // If one of the names is not found in `order`, list it last.\n          if (indexA === -1) {\n            indexA = order.length;\n          }\n\n          if (indexB === -1) {\n            indexB = order.length;\n          }\n\n          return indexA - indexB;\n        } // Use the default configure() order.\n\n\n        if (method === 'configure') {\n          return 0;\n        } // Otherwise, use alphabetical order.\n\n\n        return nameA.localeCompare(nameB, options.locales ? options.locales : undefined, {\n          numeric: true,\n          sensitivity: 'accent'\n        });\n      } // If a nested array is provided for a name, use it for ordering.\n\n\n      var index = order.indexOf(nameA);\n      order = index !== -1 && Array.isArray(order[index + 1]) ? order[index + 1] : []; // We'll need to look at the next part of the name.\n\n      depth += 1;\n    } // Identical story kinds. The shortcut at the start of this function prevents\n    // this from ever being used.\n\n    /* istanbul ignore next */\n\n\n    return 0;\n  };\n};\n\nexports.storySort = storySort;"]},"metadata":{},"sourceType":"script"}