{"ast":null,"code":"var _jsxFileName = \"/home/leon/Documentos/proyectos/react/mascaras/client/src/components/BuildModal.component.js\";\nimport React from 'react';\nimport '../App.css';\nimport Modal from 'react-bulma-components/lib/components/modal';\nimport Content from 'react-bulma-components/lib/components/content';\nimport Section from 'react-bulma-components/lib/components/section';\nimport { select, boolean } from '@storybook/addon-knobs';\nimport { getBrushes, getBottles, getRods, getWipers, getCaps } from \"../middlewares/services\";\nimport { useQuery } from \"react-query\";\nexport const BottleModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"bottles\", getBottles);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 46\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 79\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }), \"Something else\")), /*#__PURE__*/React.createElement(Button, {\n    fullwidth: boolean('Full width', false),\n    color: select('Color', colors),\n    loading: boolean('Loading', false),\n    outlined: boolean('Outlined', false),\n    inverted: boolean('Inverted', false),\n    disabled: boolean('Disabled', false),\n    text: boolean('Text', false),\n    remove: boolean('Remove', false),\n    isStatic: boolean('Static', false),\n    rounded: boolean('Rounded', false),\n    onClick: this.close,\n    onMouseEnter: action('Hover'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, \"Add\"))));\n};\nexport const BrushModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"brushes\", getBrushes);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 46\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 79\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), \"Something else\")))));\n};\nexport const RodModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"rods\", getRods);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 46\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 79\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), \"Something else\")))));\n};\nexport const WiperModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"wipers\", getWipers);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 46\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 79\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), \"Something else\")))));\n};\nexport const CapModal = () => {\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery(\"caps\", getCaps);\n  if (isLoading) return \"Loading...\";\n\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, data.map(element => /*#__PURE__*/React.createElement(Modal.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    style: {\n      backgroundColor: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, element.name), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 46\n    }\n  }, element.drawing), \" \", /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 79\n    }\n  }, element.mold), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), \"Something else\")))));\n};","map":{"version":3,"sources":["/home/leon/Documentos/proyectos/react/mascaras/client/src/components/BuildModal.component.js"],"names":["React","Modal","Content","Section","select","boolean","getBrushes","getBottles","getRods","getWipers","getCaps","useQuery","BottleModal","isLoading","error","data","message","map","element","backgroundColor","name","drawing","mold","colors","close","action","BrushModal","RodModal","WiperModal","CapModal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport Modal from 'react-bulma-components/lib/components/modal';\nimport Content from 'react-bulma-components/lib/components/content';\nimport Section from 'react-bulma-components/lib/components/section';\nimport { select, boolean } from '@storybook/addon-knobs';\nimport { getBrushes, getBottles, getRods, getWipers, getCaps } from \"../middlewares/services\";\nimport { useQuery } from \"react-query\";\n\nexport const BottleModal = () => {\n  const { isLoading, error, data } = useQuery(\"bottles\", getBottles);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <Modal.Content>\n          <Section style={{ backgroundColor: 'white' }}>\n          <p>\n            <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n            <br />\n            Something else\n          </p>\n          </Section>\n          <Button\n        fullwidth={boolean('Full width', false)}\n        color={select('Color', colors)}\n        loading={boolean('Loading', false)}\n        outlined={boolean('Outlined', false)}\n        inverted={boolean('Inverted', false)}\n        disabled={boolean('Disabled', false)}\n        text={boolean('Text', false)}\n        remove={boolean('Remove', false)}\n        isStatic={boolean('Static', false)}\n        rounded={boolean('Rounded', false)}\n        onClick={this.close}\n        onMouseEnter={action('Hover')}\n      >\n        Add\n      </Button>\n        </Modal.Content>\n      )}\n\n    </div>\n  );\n}\n\nexport const BrushModal = () => {\n  const { isLoading, error, data } = useQuery(\"brushes\", getBrushes);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <Modal.Content>\n          <Section style={{ backgroundColor: 'white' }}>\n          <p>\n            <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n            <br />\n            Something else\n          </p>\n          </Section>\n        </Modal.Content>\n      )}\n\n    </div>\n  );\n}\n\nexport const RodModal = () => {\n  const { isLoading, error, data } = useQuery(\"rods\", getRods);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <Modal.Content>\n          <Section style={{ backgroundColor: 'white' }}>\n          <p>\n            <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n            <br />\n            Something else\n          </p>\n          </Section>\n        </Modal.Content>\n      )}\n\n    </div>\n  );\n}\n\nexport const WiperModal = () => {\n  const { isLoading, error, data } = useQuery(\"wipers\", getWipers);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <Modal.Content>\n          <Section style={{ backgroundColor: 'white' }}>\n          <p>\n            <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n            <br />\n            Something else\n          </p>\n          </Section>\n        </Modal.Content>\n      )}\n\n    </div>\n  );\n}\n\nexport const CapModal = () => {\n  const { isLoading, error, data } = useQuery(\"caps\", getCaps);\n  if (isLoading) return \"Loading...\";\n  if (error) {\n    return \"Oops! \" + error.message;\n  }\n  return (\n    <div className=\"modal-body\">\n\n      { data.map( element =>\n        <Modal.Content>\n          <Section style={{ backgroundColor: 'white' }}>\n          <p>\n            <strong>{element.name }</strong> <small>{element.drawing}</small> <small>{element.mold}</small>\n            <br />\n            Something else\n          </p>\n          </Section>\n        </Modal.Content>\n      )}\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}